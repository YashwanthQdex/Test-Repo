Detaching and terminating target process
connection error: Error: read ECONNRESET
dlv dap (38711) exited with code: 0
Starting: /Users/gurunathangunaseelan/go/bin/dlv dap --listen=127.0.0.1:60000 --log-dest=3 from /Users/gurunathangunaseelan/Downloads/AIHUMAN FULL STACK/aihuman_backend/cmd/server
DAP server listening at: 127.0.0.1:60000
Type 'dlv help' for list of commands.
2025/07/10 07:12:56 üöÄ Starting server in development environment
2025/07/10 07:12:56 üîÑ Connecting to MongoDB...
2025/07/10 07:12:56 ‚úÖ Connected to MongoDB database: aihcode
2025/07/10 07:12:56 üîÑ Initializing credential service...
2025/07/10 07:12:56 ‚úÖ Credential service initialized
2025/07/10 07:12:56 üîÑ Initializing core services...
2025/07/10 07:12:56 ‚úÖ Core services initialized
2025/07/10 07:12:56 üîÑ Initializing review service...
2025/07/10 07:12:56 ‚úÖ Review service initialized
2025/07/10 07:12:56 üîÑ Initializing settings service...
2025/07/10 07:12:56 ‚úÖ Settings service initialized
2025/07/10 07:12:56 üîÑ Initializing cycle time service...
2025/07/10 07:12:56 ‚úÖ Cycle time service initialized
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)
2025/07/10 07:12:56 üîÑ Initializing handlers...
2025/07/10 07:12:56 üîÑ Initializing OAuth service...
2025/07/10 07:12:56 üîÑ Initializing OAuth handler...
[GIN-debug] POST   /api/auth/register        --> aihuman-backend/internal/handlers.(*UserHandler).Register-fm (6 handlers)
[GIN-debug] POST   /api/auth/login           --> aihuman-backend/internal/handlers.(*UserHandler).Login-fm (6 handlers)
[GIN-debug] GET    /api/oauth/:provider      --> aihuman-backend/internal/handlers.(*OAuthHandler).InitiateAuth-fm (6 handlers)
[GIN-debug] POST   /api/oauth/:provider/callback --> aihuman-backend/internal/handlers.(*OAuthHandler).HandleCallback-fm (6 handlers)
[GIN-debug] GET    /api/oauth/:provider/callback --> aihuman-backend/internal/handlers.(*OAuthHandler).HandleCallback-fm (6 handlers)
[GIN-debug] GET    /api/users                --> aihuman-backend/internal/handlers.(*UserHandler).ListUsers-fm (7 handlers)
[GIN-debug] GET    /api/users/:id            --> aihuman-backend/internal/handlers.(*UserHandler).GetUser-fm (7 handlers)
[GIN-debug] PUT    /api/users/:id            --> aihuman-backend/internal/handlers.(*UserHandler).UpdateUser-fm (7 handlers)
[GIN-debug] DELETE /api/users/:id            --> aihuman-backend/internal/handlers.(*UserHandler).DeleteUser-fm (7 handlers)
[GIN-debug] POST   /api/oauth/:provider/unlink --> aihuman-backend/internal/handlers.(*OAuthHandler).UnlinkAccount-fm (7 handlers)
[GIN-debug] POST   /api/groups               --> aihuman-backend/internal/handlers.(*GroupHandler).CreateGroup-fm (7 handlers)
[GIN-debug] GET    /api/groups               --> aihuman-backend/internal/handlers.(*GroupHandler).ListGroups-fm (7 handlers)
[GIN-debug] GET    /api/groups/:id           --> aihuman-backend/internal/handlers.(*GroupHandler).GetGroup-fm (7 handlers)
[GIN-debug] PUT    /api/groups/:id           --> aihuman-backend/internal/handlers.(*GroupHandler).UpdateGroup-fm (7 handlers)
[GIN-debug] DELETE /api/groups/:id           --> aihuman-backend/internal/handlers.(*GroupHandler).DeleteGroup-fm (7 handlers)
[GIN-debug] POST   /api/groups/:id/members   --> aihuman-backend/internal/handlers.(*GroupHandler).AddMembers-fm (7 handlers)
[GIN-debug] DELETE /api/groups/:id/members   --> aihuman-backend/internal/handlers.(*GroupHandler).RemoveMembers-fm (7 handlers)
[GIN-debug] POST   /api/projects             --> aihuman-backend/internal/handlers.(*ProjectHandler).CreateProject-fm (7 handlers)
[GIN-debug] GET    /api/projects             --> aihuman-backend/internal/handlers.(*ProjectHandler).ListProjects-fm (7 handlers)
[GIN-debug] GET    /api/projects/:id         --> aihuman-backend/internal/handlers.(*ProjectHandler).GetProject-fm (7 handlers)
[GIN-debug] PUT    /api/projects/:id         --> aihuman-backend/internal/handlers.(*ProjectHandler).UpdateProject-fm (7 handlers)
[GIN-debug] DELETE /api/projects/:id         --> aihuman-backend/internal/handlers.(*ProjectHandler).DeleteProject-fm (7 handlers)
[GIN-debug] GET    /api/projects/:id/setup   --> aihuman-backend/internal/handlers.(*ProjectHandler).GetProjectSetupInstructions-fm (7 handlers)
[GIN-debug] GET    /api/code-reviews         --> aihuman-backend/internal/handlers.(*CodeReviewHandler).ListCodeReviews-fm (7 handlers)
[GIN-debug] GET    /api/code-reviews/:id     --> aihuman-backend/internal/handlers.(*CodeReviewHandler).GetCodeReviewByID-fm (7 handlers)
[GIN-debug] GET    /api/settings             --> aihuman-backend/internal/handlers.(*SettingsHandler).GetSettings-fm (7 handlers)
[GIN-debug] PUT    /api/settings             --> aihuman-backend/internal/handlers.(*SettingsHandler).UpdateSettings-fm (7 handlers)
[GIN-debug] POST   /api/webhook/github       --> aihuman-backend/internal/handlers.(*WebhookHandler).HandleGitHubWebhook-fm (6 handlers)
[GIN-debug] POST   /api/webhook/bitbucket    --> aihuman-backend/internal/handlers.(*WebhookHandler).HandleBitbucketWebhook-fm (6 handlers)
[GIN-debug] GET    /api/pr/cycle-times       --> aihuman-backend/internal/handlers.(*Handler).AnalyticsPRCycleTimes-fm (6 handlers)
[GIN-debug] GET    /api/jira/cycle-times     --> aihuman-backend/internal/handlers.(*Handler).AnalyticsJiraCycleTimes-fm (6 handlers)
[GIN-debug] GET    /api/jira/analytics       --> aihuman-backend/internal/handlers.(*Handler).AnalyticsJiraEnhanced-fm (6 handlers)
[GIN-debug] GET    /api/analytics/open-prs-by-repo --> aihuman-backend/internal/handlers.(*Handler).AnalyticsOpenPRsByRepo-fm (6 handlers)
[GIN-debug] GET    /api/analytics/pr-summary --> aihuman-backend/internal/handlers.(*Handler).AnalyticsPRSummary-fm (6 handlers)
[GIN-debug] POST   /api/admin/ingest-prompts --> aihuman-backend/internal/handlers.(*Handler).ingestPrompts-fm (6 handlers)
[GIN-debug] POST   /api/admin/test-vector-search --> aihuman-backend/internal/handlers.(*Handler).testVectorSearch-fm (6 handlers)
[GIN-debug] GET    /api/dashboard            --> aihuman-backend/internal/handlers.(*DashboardHandler).GetDashboard-fm (6 handlers)
[GIN-debug] [WARNING] You trusted all proxies, this is NOT safe. We recommend you to set a value.
Please check https://pkg.go.dev/github.com/gin-gonic/gin#readme-don-t-trust-all-proxies for details.
[GIN-debug] Listening and serving HTTP on :8080
2025/07/10 07:12:56 ‚úÖ Routes registered
2025/07/10 07:12:56 ‚ö†Ô∏è  Using default port: 8080
2025/07/10 07:12:56 üöÄ Starting server on port 8080
2025/07/10 07:13:01 [DEBUG] Looking up project by API key: 81f066fbd53b51b0df35fd6f7f77e19da8e8bdf7bc13610b3ac37744fd074fd2
2025/07/10 07:13:01 [DEBUG] MongoDB DB: aihcode, Collection: projects, Query: map[api_key:81f066fbd53b51b0df35fd6f7f77e19da8e8bdf7bc13610b3ac37744fd074fd2]
2025/07/10 07:13:01 [DEBUG] Found project: QDEX-Bitbucket-Test for API key: 81f066fbd53b51b0df35fd6f7f77e19da8e8bdf7bc13610b3ac37744fd074fd2
2025/07/10 07:13:01 [Webhook] Initializing BitbucketService with credentials - Username: gurunathan5029, Token length: 36
2025/07/10 07:13:01 üîÑ Processing Bitbucket PR #7 from qdexconsulting/inventory-service
2025/07/10 07:13:01 [qdexconsulting/inventory-service-7-1752102781531510000] Processing PR #7 from qdexconsulting/inventory-service
2025/07/10 07:13:01 [DEBUG] Found JIRA ID SCRUM-20 in text: [SCRUM-20] feat: add inventory add, delete, and reset helpers
2025/07/10 07:13:01 üîé Extracted JIRA ID: SCRUM-20 from PR title/description/branch
2025/07/10 07:13:01 ‚ÑπÔ∏è  Initializing JIRA client for project QDEX-Bitbucket-Test
2025/07/10 07:13:01 ‚ÑπÔ∏è  JIRA Base URL: https://qdexconsulting.atlassian.net, User: ggurunathan@qdexconsulting.com, Token length: 192
2025/07/10 07:13:01 [ClientManager] ‚úÖ OpenAI client initialized for project 68652e35eae0684c5a6c77f4 with temperature: 0.00
2025/07/10 07:13:01 ‚úÖ OpenAI client initialized for project QDEX-Bitbucket-Test
2025/07/10 07:13:01 [ProviderFactory] Created new openai provider for project 68652e35eae0684c5a6c77f4
2025/07/10 07:13:03 Attempting to fetch file from: https://api.bitbucket.org/2.0/repositories/qdexconsulting/inventory-service/src/a5f2fe76d77f/push.log
2025/07/10 07:13:03 Attempting to fetch file from: https://api.bitbucket.org/2.0/repositories/qdexconsulting/inventory-service/src/a5f2fe76d77f/src/helpers/addInventory.js
2025/07/10 07:13:04 Attempting to fetch file from: https://api.bitbucket.org/2.0/repositories/qdexconsulting/inventory-service/src/a5f2fe76d77f/src/helpers/deleteInventory.js
2025/07/10 07:13:04 Attempting to fetch file from: https://api.bitbucket.org/2.0/repositories/qdexconsulting/inventory-service/src/a5f2fe76d77f/src/helpers/inventoryHelper.js
2025/07/10 07:13:05 Attempting to fetch file from: https://api.bitbucket.org/2.0/repositories/qdexconsulting/inventory-service/src/a5f2fe76d77f/src/helpers/resetInventory.js
2025/07/10 07:13:05 Attempting to fetch file from: https://api.bitbucket.org/2.0/repositories/qdexconsulting/inventory-service/src/a5f2fe76d77f/src/routes/inventory.js
2025/07/10 07:13:06 [Webhook] Retrieved 6 files from Bitbucket API
2025/07/10 07:13:06 [Webhook] File: push.log, Content length: 0
2025/07/10 07:13:06 [Webhook] File content preview: 
2025/07/10 07:13:06 [Webhook] File: src/helpers/addInventory.js, Content length: 173
2025/07/10 07:13:06 [Webhook] File content preview: const inventory = require('./inventoryHelper');
function addInventory(itemId, quantity) {
  return inventory.addItem(itemId, quantity);
}
module.exports = { addInventory }; 
2025/07/10 07:13:06 [Webhook] File: src/helpers/deleteInventory.js, Content length: 757
2025/07/10 07:13:06 [Webhook] File content preview: const winston = require('winston');
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports
2025/07/10 07:13:06 [Webhook] File: src/helpers/inventoryHelper.js, Content length: 2860
2025/07/10 07:13:06 [Webhook] File content preview: const winston = require('winston');

// LOW: Inefficient logger configuration (duplicate configuration)
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    win
2025/07/10 07:13:06 [Webhook] File: src/helpers/resetInventory.js, Content length: 665
2025/07/10 07:13:06 [Webhook] File content preview: const winston = require('winston');
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports
2025/07/10 07:13:06 [Webhook] File: src/routes/inventory.js, Content length: 3569
2025/07/10 07:13:06 [Webhook] File content preview: const express = require('express');
const InventoryHelper = require('../helpers/inventoryHelper');
const winston = require('winston');

const router = express.Router();
const logger = winston.createLo
2025/07/10 07:13:06 [Webhook] ‚úÖ Kept file: src/helpers/addInventory.js (length: 173)
2025/07/10 07:13:06 [Webhook] ‚úÖ Kept file: src/helpers/deleteInventory.js (length: 757)
2025/07/10 07:13:06 [Webhook] ‚úÖ Kept file: src/helpers/inventoryHelper.js (length: 2860)
2025/07/10 07:13:06 [Webhook] ‚úÖ Kept file: src/helpers/resetInventory.js (length: 665)
2025/07/10 07:13:06 [Webhook] ‚úÖ Kept file: src/routes/inventory.js (length: 3569)
2025/07/10 07:13:06 [Debug] push.log identified as generated/config: contains .log
2025/07/10 07:13:06 [Webhook] üö´ Filtered out auto-generated file: push.log (length: 0)
2025/07/10 07:13:06 [Webhook] After filtering: 5 files kept out of 6 total
2025/07/10 07:13:06 [BitbucketService] Fetching diff from URL: https://api.bitbucket.org/2.0/repositories/qdexconsulting/inventory-service/pullrequests/7/diff
2025/07/10 07:13:06 [BitbucketService] Received diff content length: 4413
2025/07/10 07:13:06 [BitbucketService] First 200 chars of diff: diff --git a/push.log b/push.log
index 2f65a0f..e69de29 100644
--- a/push.log
+++ b/push.log
@@ -1 +0,0 @@
-Pushing to Bitbucket at Wed Jul  2 20:23:48 +08 2025
diff --git a/src/helpers/addInventory.j
2025/07/10 07:13:06 [Webhook] Retrieved PR diff, length: 4413
2025/07/10 07:13:06 [Webhook] PR diff content: diff --git a/push.log b/push.log
index 2f65a0f..e69de29 100644
--- a/push.log
+++ b/push.log
@@ -1 +0,0 @@
-Pushing to Bitbucket at Wed Jul  2 20:23:48 +08 2025
diff --git a/src/helpers/addInventory.js b/src/helpers/addInventory.js
new file mode 100644
index 0000000..9f191d3
--- /dev/null
+++ b/src/helpers/addInventory.js
@@ -0,0 +1,5 @@
+const inventory = require('./inventoryHelper');
+function addInventory(itemId, quantity) {
+  return inventory.addItem(itemId, quantity);
+}
+module.exports = { addInventory }; 
\ No newline at end of file
diff --git a/src/helpers/deleteInventory.js b/src/helpers/deleteInventory.js
new file mode 100644
index 0000000..1980cff
--- /dev/null
+++ b/src/helpers/deleteInventory.js
@@ -0,0 +1,26 @@
+const winston = require('winston');
+const logger = winston.createLogger({
+  level: 'info',
+  format: winston.format.combine(
+    winston.format.timestamp(),
+    winston.format.json()
+  ),
+  transports: [
+    new winston.transports.File({ filename: 'delete-inventory.log' })
+  ]
+});
+const inventory = require('./inventoryHelper');
+function deleteInventory(itemId) {
+  try {
+    if (!inventory) return false;
+    if (!itemId) return false;
+    if (inventory.getItemQuantity(itemId) === 0) return false;
+    inventory._inventory.delete(itemId);
+    logger.info(`Deleted inventory for itemId: ${itemId}`);
+    return true;
+  } catch (e) {
+    logger.error('Error deleting inventory: ' + e.message);
+    return false;
+  }
+}
+module.exports = { deleteInventory }; 
\ No newline at end of file
diff --git a/src/helpers/inventoryHelper.js b/src/helpers/inventoryHelper.js
index 57dc26f..8c67d94 100644
--- a/src/helpers/inventoryHelper.js
+++ b/src/helpers/inventoryHelper.js
@@ -69,6 +69,22 @@ class InventoryHelper {
       quantity
     }));
   }
+
+  static decrementAfterSale(itemId, quantity) {
+    try {
+      const currentQuantity = inventory.get(itemId) || 0;
+      if (currentQuantity < quantity) {
+        logger.warn(`Not enough inventory for itemId: ${itemId} to decrement after sale`);
+        return false;
+      }
+      inventory.set(itemId, currentQuantity - quantity);
+      logger.info(`Decremented ${quantity} items for itemId: ${itemId} after sale`);
+      return true;
+    } catch (error) {
+      logger.error('Error decrementing after sale: ' + error.message);
+      return false;
+    }
+  }
 }
 
 // CRITICAL: Exposed credentials
diff --git a/src/helpers/resetInventory.js b/src/helpers/resetInventory.js
new file mode 100644
index 0000000..04ca4d3
--- /dev/null
+++ b/src/helpers/resetInventory.js
@@ -0,0 +1,26 @@
+const winston = require('winston');
+const logger = winston.createLogger({
+  level: 'info',
+  format: winston.format.combine(
+    winston.format.timestamp(),
+    winston.format.json()
+  ),
+  transports: [
+    new winston.transports.File({ filename: 'reset-inventory.log' })
+  ]
+});
+const inventory = require('./inventoryHelper');
+function resetInventory() {
+  try {
+    if (inventory && inventory._inventory) {
+      inventory._inventory.clear();
+      logger.info('Inventory reset');
+      return true;
+    }
+    return false;
+  } catch (e) {
+    logger.error('Error resetting inventory: ' + e.message);
+    return false;
+  }
+}
+module.exports = { resetInventory }; 
\ No newline at end of file
diff --git a/src/routes/inventory.js b/src/routes/inventory.js
index e4b77bc..9302950 100644
--- a/src/routes/inventory.js
+++ b/src/routes/inventory.js
@@ -83,6 +83,26 @@ router.post('/:itemId/remove', (req, res) => {
   }
 });
 
+// Decrement inventory after sales
+router.post('/:itemId/decrement-after-sale', (req, res) => {
+  try {
+    const { itemId } = req.params;
+    const { quantity } = req.body;
+    if (!quantity || quantity <= 0) {
+      return res.status(400).json({ error: 'Invalid quantity' });
+    }
+    const success = InventoryHelper.decrementAfterSale(itemId, quantity);
+    if (success) {
+      res.json({ message: 'Inventory decremented after sale successfully' });
+    } else {
+      res.status(400).json({ error: 'Insufficient inventory for sale' });
+    }
+  } catch (error) {
+    logger.error(`Error decrementing after sale: ${error.message}`);
+    res.status(500).json({ error: 'Failed to decrement inventory after sale' });
+  }
+});
+
 // CRITICAL: SQL Injection
 router.get('/search/:query', (req, res) => {
   const query = req.params.query;
2025/07/10 07:13:06 ‚ÑπÔ∏è  Retrieved 6 files for PR #7
2025/07/10 07:13:06 [DiffParser] File: push.log, Added: 0, Removed: 1, Total: 3
2025/07/10 07:13:06 [DiffParser] File: src/helpers/addInventory.js, Added: 5, Removed: 0, Total: 9
2025/07/10 07:13:06 [DiffParser] File: src/helpers/deleteInventory.js, Added: 26, Removed: 0, Total: 30
2025/07/10 07:13:06 [DiffParser] File: src/helpers/inventoryHelper.js, Added: 16, Removed: 0, Total: 24
2025/07/10 07:13:06 [DiffParser] File: src/helpers/resetInventory.js, Added: 26, Removed: 0, Total: 30
2025/07/10 07:13:06 [DiffParser] File: src/routes/inventory.js, Added: 20, Removed: 0, Total: 28
2025/07/10 07:13:06 ‚úÖ Populated diff with 6 files and 124 total lines
2025/07/10 07:13:06 üîç Starting enhanced diff extraction for PR #7
2025/07/10 07:13:06 ‚úÖ Enhanced diff extraction completed successfully
2025/07/10 07:13:06 üìä Enhanced diff stats: 12 functions, 0 classes extracted
2025/07/10 07:13:07 ‚úÖ Successfully fetched JIRA info for SCRUM-20: &{ID:SCRUM-20 Title:Business Description: Enhanced Inventory Management Capabilities Description:The inventory service has been enhanced to provide comprehensive inventory management functionalities, supporting key business operations and future scalability. The new features enable seamless control over stock levels, ensuring that inventory data remains accurate and actionable across all business processes.

*Key Capabilities:*

* *Add Inventory:* Easily increase stock levels for any item, supporting restocking and procurement workflows.

* *Delete Inventory:* Remove obsolete or discontinued items from the system, keeping inventory records clean and relevant.

* *Reset Inventory:* Instantly clear all inventory data, enabling rapid resets for audits, testing, or business pivots.

* *Decrement After Sale:* Automatically reduce item quantities following sales transactions, ensuring real-time inventory accuracy and supporting sales reconciliation.

These enhancements empower the business to maintain up-to-date inventory records, reduce operational risk, and support integration with sales, procurement, and reporting systems. The modular design ensures that the system can be easily extended to support future business needs, such as integration with external databases, analytics, or automated replenishment. Status:To Do Type:Story Created:2025-07-05 19:57:13.879 +0530 +0530 Updated:2025-07-05 19:57:14.7 +0530 +0530 ParentID: ParentDesc: Assignee:}
2025/07/10 07:13:07 [DEBUG] Project: QDEX-Bitbucket-Test, AnalyzerType: openai, AI Token configured: true, AI Token length: 164
2025/07/10 07:13:07 [ClientManager] OpenAI client already initialized for project 68652e35eae0684c5a6c77f4
2025/07/10 07:13:07 ‚úÖ OpenAI client initialized for project QDEX-Bitbucket-Test
2025/07/10 07:13:07 [ProviderFactory] Created new openai provider for project 68652e35eae0684c5a6c77f4
2025/07/10 07:13:07 ‚úÖ OpenAI provider registered for RAG
2025/07/10 07:13:07 [Orchestrator] Warning: Code Review Agent not found or wrong type
2025/07/10 07:13:07 [Webhook] RAG system initialized for Bitbucket PR #7
2025/07/10 07:13:07 [Webhook] üîß Set project analyzer type in context: openai
2025/07/10 07:13:07 [Orchestrator] Using 5 files provided for AI classification
2025/07/10 07:13:07 [Orchestrator] AI Classification input preparation:
2025/07/10 07:13:07 [Orchestrator] PR Title: [SCRUM-20] feat: add inventory add, delete, and reset helpers
2025/07/10 07:13:07 [Orchestrator] PR Description: No description provided.
2025/07/10 07:13:07 [Orchestrator] File contents count: 5
2025/07/10 07:13:07 [Orchestrator] File: src/routes/inventory.js, Content length: 3569
2025/07/10 07:13:07 [Orchestrator] File content preview: const express = require('express');
const InventoryHelper = require('../helpers/inventoryHelper');
const winston = require('winston');

const router = express.Router();
const logger = winston.createLo...
2025/07/10 07:13:07 [Orchestrator] File: src/helpers/addInventory.js, Content length: 173
2025/07/10 07:13:07 [Orchestrator] File content preview: const inventory = require('./inventoryHelper');
function addInventory(itemId, quantity) {
  return inventory.addItem(itemId, quantity);
}
module.exports = { addInventory }; 
2025/07/10 07:13:07 [Orchestrator] File: src/helpers/deleteInventory.js, Content length: 757
2025/07/10 07:13:07 [Orchestrator] File content preview: const winston = require('winston');
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports...
2025/07/10 07:13:07 [Orchestrator] File: src/helpers/inventoryHelper.js, Content length: 2860
2025/07/10 07:13:07 [Orchestrator] File content preview: const winston = require('winston');

// LOW: Inefficient logger configuration (duplicate configuration)
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    win...
2025/07/10 07:13:07 [Orchestrator] File: src/helpers/resetInventory.js, Content length: 665
2025/07/10 07:13:07 [Orchestrator] File content preview: const winston = require('winston');
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports...
2025/07/10 07:13:07 [Orchestrator] Building diff content from 6 diff files
2025/07/10 07:13:07 [Orchestrator] Processing diff for file: push.log with 3 lines
2025/07/10 07:13:07 [Orchestrator] Processing diff for file: src/helpers/addInventory.js with 9 lines
2025/07/10 07:13:07 [Orchestrator] Processing diff for file: src/helpers/deleteInventory.js with 30 lines
2025/07/10 07:13:07 [Orchestrator] Processing diff for file: src/helpers/inventoryHelper.js with 24 lines
2025/07/10 07:13:07 [Orchestrator] Processing diff for file: src/helpers/resetInventory.js with 30 lines
2025/07/10 07:13:07 [Orchestrator] Processing diff for file: src/routes/inventory.js with 28 lines
2025/07/10 07:13:07 [Orchestrator] Built diff content length: 4157
2025/07/10 07:13:07 [Orchestrator] Diff content: File: push.log
   a/push.log b/push.log
- -Pushing to Bitbucket at Wed Jul  2 20:23:48 +08 2025
  

File: src/helpers/addInventory.js
   a/src/helpers/addInventory.js b/src/helpers/addInventory.js
  new file mode 100644
+ +const inventory = require('./inventoryHelper');
+ +function addInventory(itemId, quantity) {
+ +  return inventory.addItem(itemId, quantity);
+ +}
+ +module.exports = { addInventory }; 
  \ No newline at end of file
  

File: src/helpers/deleteInventory.js
   a/src/helpers/deleteInventory.js b/src/helpers/deleteInventory.js
  new file mode 100644
+ +const winston = require('winston');
+ +const logger = winston.createLogger({
+ +  level: 'info',
+ +  format: winston.format.combine(
+ +    winston.format.timestamp(),
+ +    winston.format.json()
+ +  ),
+ +  transports: [
+ +    new winston.transports.File({ filename: 'delete-inventory.log' })
+ +  ]
+ +});
+ +const inventory = require('./inventoryHelper');
+ +function deleteInventory(itemId) {
+ +  try {
+ +    if (!inventory) return false;
+ +    if (!itemId) return false;
+ +    if (inventory.getItemQuantity(itemId) === 0) return false;
+ +    inventory._inventory.delete(itemId);
+ +    logger.info(`Deleted inventory for itemId: ${itemId}`);
+ +    return true;
+ +  } catch (e) {
+ +    logger.error('Error deleting inventory: ' + e.message);
+ +    return false;
+ +  }
+ +}
+ +module.exports = { deleteInventory }; 
  \ No newline at end of file
  

File: src/helpers/inventoryHelper.js
   a/src/helpers/inventoryHelper.js b/src/helpers/inventoryHelper.js
         quantity
       }));
     }
+ +
+ +  static decrementAfterSale(itemId, quantity) {
+ +    try {
+ +      const currentQuantity = inventory.get(itemId) || 0;
+ +      if (currentQuantity < quantity) {
+ +        logger.warn(`Not enough inventory for itemId: ${itemId} to decrement after sale`);
+ +        return false;
+ +      }
+ +      inventory.set(itemId, currentQuantity - quantity);
+ +      logger.info(`Decremented ${quantity} items for itemId: ${itemId} after sale`);
+ +      return true;
+ +    } catch (error) {
+ +      logger.error('Error decrementing after sale: ' + error.message);
+ +      return false;
+ +    }
+ +  }
   }
   
   // CRITICAL: Exposed credentials
  

File: src/helpers/resetInventory.js
   a/src/helpers/resetInventory.js b/src/helpers/resetInventory.js
  new file mode 100644
+ +const winston = require('winston');
+ +const logger = winston.createLogger({
+ +  level: 'info',
+ +  format: winston.format.combine(
+ +    winston.format.timestamp(),
+ +    winston.format.json()
+ +  ),
+ +  transports: [
+ +    new winston.transports.File({ filename: 'reset-inventory.log' })
+ +  ]
+ +});
+ +const inventory = require('./inventoryHelper');
+ +function resetInventory() {
+ +  try {
+ +    if (inventory && inventory._inventory) {
+ +      inventory._inventory.clear();
+ +      logger.info('Inventory reset');
+ +      return true;
+ +    }
+ +    return false;
+ +  } catch (e) {
+ +    logger.error('Error resetting inventory: ' + e.message);
+ +    return false;
+ +  }
+ +}
+ +module.exports = { resetInventory }; 
  \ No newline at end of file
  

File: src/routes/inventory.js
   a/src/routes/inventory.js b/src/routes/inventory.js
     }
   });
   
+ +// Decrement inventory after sales
+ +router.post('/:itemId/decrement-after-sale', (req, res) => {
+ +  try {
+ +    const { itemId } = req.params;
+ +    const { quantity } = req.body;
+ +    if (!quantity || quantity <= 0) {
+ +      return res.status(400).json({ error: 'Invalid quantity' });
+ +    }
+ +    const success = InventoryHelper.decrementAfterSale(itemId, quantity);
+ +    if (success) {
+ +      res.json({ message: 'Inventory decremented after sale successfully' });
+ +    } else {
+ +      res.status(400).json({ error: 'Insufficient inventory for sale' });
+ +    }
+ +  } catch (error) {
+ +    logger.error(`Error decrementing after sale: ${error.message}`);
+ +    res.status(500).json({ error: 'Failed to decrement inventory after sale' });
+ +  }
+ +});
+ +
   // CRITICAL: SQL Injection
   router.get('/search/:query', (req, res) => {
     const query = req.params.query;
  

2025/07/10 07:13:07 [Orchestrator] AI Classification input - Files: 5, Diff lines: 124
2025/07/10 07:13:07 [AIClassification] Processing AI classification request
2025/07/10 07:13:07 [AIClassification] Input validation - PR Title: [SCRUM-20] feat: add inventory add, delete, and reset helpers
2025/07/10 07:13:07 [AIClassification] Input validation - PR Description: No description provided.
2025/07/10 07:13:07 [AIClassification] Input validation - File contents count: 5
2025/07/10 07:13:07 [AIClassification] Input validation - Diff content length: 4157
2025/07/10 07:13:07 [AIClassification] Successfully read ai_involvement.yaml, size: 4866 bytes
2025/07/10 07:13:07 [AIClassification] Successfully parsed YAML, ai_involvement_prompt length: 4659
2025/07/10 07:13:07 [AIClassification] Building prompt with input:
2025/07/10 07:13:07 [AIClassification] PR Title: [SCRUM-20] feat: add inventory add, delete, and reset helpers
2025/07/10 07:13:07 [AIClassification] PR Description: No description provided.
2025/07/10 07:13:07 [AIClassification] Number of files: 5
2025/07/10 07:13:07 [AIClassification] Diff content length: 4157
2025/07/10 07:13:07 [AIClassification] File: src/helpers/addInventory.js, Content length: 173
2025/07/10 07:13:07 [AIClassification] File content preview: const inventory = require('./inventoryHelper');
function addInventory(itemId, quantity) {
  return inventory.addItem(itemId, quantity);
}
module.exports = { addInventory }; 
2025/07/10 07:13:07 [AIClassification] File: src/helpers/deleteInventory.js, Content length: 757
2025/07/10 07:13:07 [AIClassification] File content preview: const winston = require('winston');
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports...
2025/07/10 07:13:07 [AIClassification] File: src/helpers/inventoryHelper.js, Content length: 2860
2025/07/10 07:13:07 [AIClassification] File content preview: const winston = require('winston');

// LOW: Inefficient logger configuration (duplicate configuration)
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    win...
2025/07/10 07:13:07 [AIClassification] File: src/helpers/resetInventory.js, Content length: 665
2025/07/10 07:13:07 [AIClassification] File content preview: const winston = require('winston');
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports...
2025/07/10 07:13:07 [AIClassification] File: src/routes/inventory.js, Content length: 3569
2025/07/10 07:13:07 [AIClassification] File content preview: const express = require('express');
const InventoryHelper = require('../helpers/inventoryHelper');
const winston = require('winston');

const router = express.Router();
const logger = winston.createLo...
2025/07/10 07:13:07 [AIClassification] Diff content: File: push.log
   a/push.log b/push.log
- -Pushing to Bitbucket at Wed Jul  2 20:23:48 +08 2025
  

File: src/helpers/addInventory.js
   a/src/helpers/addInventory.js b/src/helpers/addInventory.js
  new file mode 100644
+ +const inventory = require('./inventoryHelper');
+ +function addInventory(itemId, quantity) {
+ +  return inventory.addItem(itemId, quantity);
+ +}
+ +module.exports = { addInventory }; 
  \ No newline at end of file
  

File: src/helpers/deleteInventory.js
   a/src/helpers/deleteInventory.js b/src/helpers/deleteInventory.js
  new file mode 100644
+ +const winston = require('winston');
+ +const logger = winston.createLogger({
+ +  level: 'info',
+ +  format: winston.format.combine(
+ +    winston.format.timestamp(),
+ +    winston.format.json()
+ +  ),
+ +  transports: [
+ +    new winston.transports.File({ filename: 'delete-inventory.log' })
+ +  ]
+ +});
+ +const inventory = require('./inventoryHelper');
+ +function deleteInventory(itemId) {
+ +  try {
+ +    if (!inventory) return false;
+ +    if (!itemId) return false;
+ +    if (inventory.getItemQuantity(itemId) === 0) return false;
+ +    inventory._inventory.delete(itemId);
+ +    logger.info(`Deleted inventory for itemId: ${itemId}`);
+ +    return true;
+ +  } catch (e) {
+ +    logger.error('Error deleting inventory: ' + e.message);
+ +    return false;
+ +  }
+ +}
+ +module.exports = { deleteInventory }; 
  \ No newline at end of file
  

File: src/helpers/inventoryHelper.js
   a/src/helpers/inventoryHelper.js b/src/helpers/inventoryHelper.js
         quantity
       }));
     }
+ +
+ +  static decrementAfterSale(itemId, quantity) {
+ +    try {
+ +      const currentQuantity = inventory.get(itemId) || 0;
+ +      if (currentQuantity < quantity) {
+ +        logger.warn(`Not enough inventory for itemId: ${itemId} to decrement after sale`);
+ +        return false;
+ +      }
+ +      inventory.set(itemId, currentQuantity - quantity);
+ +      logger.info(`Decremented ${quantity} items for itemId: ${itemId} after sale`);
+ +      return true;
+ +    } catch (error) {
+ +      logger.error('Error decrementing after sale: ' + error.message);
+ +      return false;
+ +    }
+ +  }
   }
   
   // CRITICAL: Exposed credentials
  

File: src/helpers/resetInventory.js
   a/src/helpers/resetInventory.js b/src/helpers/resetInventory.js
  new file mode 100644
+ +const winston = require('winston');
+ +const logger = winston.createLogger({
+ +  level: 'info',
+ +  format: winston.format.combine(
+ +    winston.format.timestamp(),
+ +    winston.format.json()
+ +  ),
+ +  transports: [
+ +    new winston.transports.File({ filename: 'reset-inventory.log' })
+ +  ]
+ +});
+ +const inventory = require('./inventoryHelper');
+ +function resetInventory() {
+ +  try {
+ +    if (inventory && inventory._inventory) {
+ +      inventory._inventory.clear();
+ +      logger.info('Inventory reset');
+ +      return true;
+ +    }
+ +    return false;
+ +  } catch (e) {
+ +    logger.error('Error resetting inventory: ' + e.message);
+ +    return false;
+ +  }
+ +}
+ +module.exports = { resetInventory }; 
  \ No newline at end of file
  

File: src/routes/inventory.js
   a/src/routes/inventory.js b/src/routes/inventory.js
     }
   });
   
+ +// Decrement inventory after sales
+ +router.post('/:itemId/decrement-after-sale', (req, res) => {
+ +  try {
+ +    const { itemId } = req.params;
+ +    const { quantity } = req.body;
+ +    if (!quantity || quantity <= 0) {
+ +      return res.status(400).json({ error: 'Invalid quantity' });
+ +    }
+ +    const success = InventoryHelper.decrementAfterSale(itemId, quantity);
+ +    if (success) {
+ +      res.json({ message: 'Inventory decremented after sale successfully' });
+ +    } else {
+ +      res.status(400).json({ error: 'Insufficient inventory for sale' });
+ +    }
+ +  } catch (error) {
+ +    logger.error(`Error decrementing after sale: ${error.message}`);
+ +    res.status(500).json({ error: 'Failed to decrement inventory after sale' });
+ +  }
+ +});
+ +
   // CRITICAL: SQL Injection
   router.get('/search/:query', (req, res) => {
     const query = req.params.query;
2025/07/10 07:13:07 [AIClassification] Generated prompt length: 17192
2025/07/10 07:13:07 [AIClassification] Prompt preview: You are a pull request analysis tool.

Your ONLY task is to determine whether a pull request (PR) was **authored or significantly assisted by AI** or **written by a human**, based on its code, structure, commit messages, and patterns.

---

üß† **Evaluation Responsibilities**
- Analyze the code, commit messages, and PR structure for AI or human authorship signals.
- Consider patterns, consistency, and AI-like characteristics in the new code.
- Focus only on the added/modified lines in this PR.
...
2025/07/10 07:13:07 [AIClassification] Sending prompt to LLM provider
2025/07/10 07:13:07 [AIClassification] LLM Provider type: *providers.OpenAIProvider
2025/07/10 07:13:07 [AIClassification] Prompt length: 17192
2025/07/10 07:13:07 [AIClassification] Prompt preview: You are a pull request analysis tool.

Your ONLY task is to determine whether a pull request (PR) was **authored or significantly assisted by AI** or **written by a human**, based on its code, structure, commit messages, and patterns.

---

üß† **Evaluation Responsibilities**
- Analyze the code, commit messages, and PR structure for AI or human authorship signals.
- Consider patterns, consistency, and AI-like characteristics in the new code.
- Focus only on the added/modified lines in this PR.
...
2025/07/10 07:13:11 [OpenAIProvider] Health updated: healthy, Error: 
2025/07/10 07:13:11 [AIClassification] Received response from LLM
2025/07/10 07:13:11 [AIClassification] Response length: 519
2025/07/10 07:13:11 [AIClassification] Response content: {
  "score": 2,
  "ai_percentage": 67,
  "reasons": [
    {
      "is_ai": true,
      "reason": "Repetitive patterns across unrelated files, such as identical logger configurations."
    },
    {
      "is_ai": true,
      "reason": "Mechanical consistency in naming, formatting, and code structure across multiple helper files, suggesting templated code."
    },
    {
      "is_ai": false,
      "reason": "Use of hardcoded credentials and logging inconsistencies, indicating human oversight and errors."
    }
  ]
}
2025/07/10 07:13:11 [AIClassification] Successfully parsed response
2025/07/10 07:13:11 [AIClassification] Parsed result - Score: 2.000000, AI Percentage: 67, Reasons count: 3
2025/07/10 07:13:11 [AIClassification] Successfully completed classification
2025/07/10 07:13:11 [AIClassification] Result - Score: 2.000000, AI Percentage: 67, Reasons count: 3
2025/07/10 07:13:11 [Batching] Using openai configuration: 128000 tokens, 25 files, 2500 diff lines
2025/07/10 07:13:11 [Batching] üöÄ Creating batches for PR #7 (RequestID: bitbucket-webhook-7-20250710-071307)
2025/07/10 07:13:11 [Batching] üìä Files to process: 5
2025/07/10 07:13:11 [Batching] üìä Related files: 0
2025/07/10 07:13:11 [Batching] üìä Diff content length: 4715 chars
2025/07/10 07:13:11 [Batching] üìä Files after filtering: 5 (filtered out 0)
2025/07/10 07:13:11 [Batching] üìä Related files after filtering: 0 (filtered out 0)
2025/07/10 07:13:11 [Batching] üìã Metadata tokens: 221
2025/07/10 07:13:11 [Batching] üìÅ Grouped 5 files into 5 groups
2025/07/10 07:13:11 [Batching] üìÅ File group: 1 files, 947 tokens, 119 lines
2025/07/10 07:13:11 [Batching] üìÑ Added file to batch: src/routes/inventory.js, Tokens: 947, Lines: 119
2025/07/10 07:13:11 [Batching] üìÅ File group: 1 files, 99 tokens, 4 lines
2025/07/10 07:13:11 [Batching] üìÑ Added file to batch: src/helpers/addInventory.js, Tokens: 99, Lines: 4
2025/07/10 07:13:11 [Batching] üìÅ File group: 1 files, 246 tokens, 25 lines
2025/07/10 07:13:11 [Batching] üìÑ Added file to batch: src/helpers/deleteInventory.js, Tokens: 246, Lines: 25
2025/07/10 07:13:11 [Batching] üìÅ File group: 1 files, 772 tokens, 96 lines
2025/07/10 07:13:11 [Batching] üìÑ Added file to batch: src/helpers/inventoryHelper.js, Tokens: 772, Lines: 96
2025/07/10 07:13:11 [Batching] üìÅ File group: 1 files, 223 tokens, 25 lines
2025/07/10 07:13:11 [Batching] üìÑ Added file to batch: src/helpers/resetInventory.js, Tokens: 223, Lines: 25
2025/07/10 07:13:11 [Batching] ‚úÖ Created final batch 1 with 5 files, 2287 tokens
2025/07/10 07:13:11 [Batching] üîÄ Parsing diff content for 5 files
2025/07/10 07:13:11 [Batching] üîç Parsed diff content for 6 files
2025/07/10 07:13:11 [Batching] üîç File: src/helpers/addInventory.js, Diff length: 350 chars
2025/07/10 07:13:11 [Batching] üîç File: src/helpers/deleteInventory.js, Diff length: 1087 chars
2025/07/10 07:13:11 [Batching] üîç File: src/helpers/inventoryHelper.js, Diff length: 874 chars
2025/07/10 07:13:11 [Batching] üîç File: src/helpers/resetInventory.js, Diff length: 993 chars
2025/07/10 07:13:11 [Batching] üîç File: src/routes/inventory.js, Diff length: 1104 chars
2025/07/10 07:13:11 [Batching] üîç File: push.log, Diff length: 100 chars
2025/07/10 07:13:11 [Batching] üîÄ Found diff content for 6 files
2025/07/10 07:13:11 [Batching] üîç DEBUG: All parsed file diffs:
2025/07/10 07:13:11 [Batching] üîç   src/helpers/resetInventory.js: 993 chars
2025/07/10 07:13:11 [Batching] üîç   src/routes/inventory.js: 1104 chars
2025/07/10 07:13:11 [Batching] üîç   push.log: 100 chars
2025/07/10 07:13:11 [Batching] üîç   src/helpers/addInventory.js: 350 chars
2025/07/10 07:13:11 [Batching] üîç   src/helpers/deleteInventory.js: 1087 chars
2025/07/10 07:13:11 [Batching] üîç   src/helpers/inventoryHelper.js: 874 chars
2025/07/10 07:13:11 [Batching] üîç DEBUG: All batch files:
2025/07/10 07:13:11 [Batching] üîç   Batch 1 files:
2025/07/10 07:13:11 [Batching] üîç     src/helpers/deleteInventory.js
2025/07/10 07:13:11 [Batching] üîç     src/helpers/inventoryHelper.js
2025/07/10 07:13:11 [Batching] üîç     src/helpers/resetInventory.js
2025/07/10 07:13:11 [Batching] üîç     src/routes/inventory.js
2025/07/10 07:13:11 [Batching] üîç     src/helpers/addInventory.js
2025/07/10 07:13:11 [Batching] üîÄ Batch 1: Matched diff for src/routes/inventory.js (1104 chars)
2025/07/10 07:13:11 [Batching] üîÄ Batch 1: Matched diff for src/helpers/addInventory.js (350 chars)
2025/07/10 07:13:11 [Batching] üîÄ Batch 1: Matched diff for src/helpers/deleteInventory.js (1087 chars)
2025/07/10 07:13:11 [Batching] üîÄ Batch 1: Matched diff for src/helpers/inventoryHelper.js (874 chars)
2025/07/10 07:13:11 [Batching] üîÄ Batch 1: Matched diff for src/helpers/resetInventory.js (993 chars)
2025/07/10 07:13:11 [Batching] üîÄ Batch 1: 5/5 files have diff content (4675 chars), 0 unmatched
2025/07/10 07:13:11 [Batching] ‚úÖ Created 1 batches for PR #7
2025/07/10 07:13:11 [Batching] üì¶ Batch 1: 5 files, 0 related files, 4675 diff chars, ~3676 tokens
2025/07/10 07:13:11 [Batching] ‚úÖ Batch 1 validation passed: 5 files, 3676 tokens, 4675 diff chars
2025/07/10 07:13:11 [Batching] üìä Summary: 1 batches, 5 total files, ~3676 total tokens, 4675 total diff chars
2025/07/10 07:13:11 ‚úÖ Created 1 batches for PR #7
2025/07/10 07:13:11 [Batching] Created 1 batches:
  Batch 1/1: 5 files, 0 related files, 4675 diff chars, ~3676 tokens
Total: 5 files, 0 related files, 4675 diff chars, ~3676 tokens
2025/07/10 07:13:11 üîç Adding enhanced diff context to 1 batches
2025/07/10 07:13:11 ‚úÖ Enhanced diff context added to all batches
2025/07/10 07:13:11 [Batching] üîç Validating 1 batches...
2025/07/10 07:13:11 [Batching] ‚úÖ Batch 1 validation passed: 5 files, 3676 tokens, 4675 diff chars
2025/07/10 07:13:11 [Batching] ‚úÖ All 1 batches validated successfully
2025/07/10 07:13:11 [Batching] ‚úÖ All 1 batches validated successfully
2025/07/10 07:13:11 [Batching] üìä Batch statistics: map[average_files_per_batch:5 batch_sizes:[5] largest_batch:5 smallest_batch:5 total_batches:1 total_diff_chars:4675 total_files:5 total_related_files:0 total_tokens:3676]
2025/07/10 07:13:12 ‚úÖ Added JIRA description to 1 batches
2025/07/10 07:13:12 üîç DEBUG: Logging content of 1 batches before processing
2025/07/10 07:13:12 üì¶ BATCH 1/1 DETAILS:
2025/07/10 07:13:12    RequestID: bitbucket-webhook-7-20250710-071307
2025/07/10 07:13:12    PR Number: 7
2025/07/10 07:13:12    Repository: qdexconsulting/inventory-service
2025/07/10 07:13:12    Batch Number: 1/1
2025/07/10 07:13:12    PR Title: [SCRUM-20] feat: add inventory add, delete, and reset helpers
2025/07/10 07:13:12    PR Description: No description provided.
2025/07/10 07:13:12    JIRA Ticket ID: SCRUM-20
2025/07/10 07:13:12    JIRA Description: The inventory service has been enhanced to provide comprehensive inventory management functionalities, supporting key business operations and future scalability. The new features enable seamless contr
2025/07/10 07:13:12    JIRA Parent ID: 
2025/07/10 07:13:12    JIRA Parent Description: 
2025/07/10 07:13:12    Diff Content Length: 4675 chars
2025/07/10 07:13:12    Files Count: 5
2025/07/10 07:13:12    Related Files Count: 0
2025/07/10 07:13:12    üìÑ File: src/helpers/addInventory.js (length: 173 chars)
2025/07/10 07:13:12    üìÑ File: src/helpers/deleteInventory.js (length: 757 chars)
2025/07/10 07:13:12    üìÑ File: src/helpers/inventoryHelper.js (length: 2860 chars)
2025/07/10 07:13:12    üìÑ File: src/helpers/resetInventory.js (length: 665 chars)
2025/07/10 07:13:12    üìÑ File: src/routes/inventory.js (length: 3569 chars)
2025/07/10 07:13:12    üîÄ Diff Preview: === DIFF FOR FILE: src/routes/inventory.js ===
context  a/src/routes/inventory.js b/src/routes/inventory.js
context    }
context  });
context  
added +// Decrement inventory after sales
added +router.post('/:itemId/decrement-after-sale', (req, res) => {
added +  try {
added +    const { itemId } = r
2025/07/10 07:13:12    ---
2025/07/10 07:13:12 [bitbucket-webhook-7-20250710-071307] üöÄ Starting orchestrator processing for PR #7 with 1 batches
2025/07/10 07:13:12 [bitbucket-webhook-7-20250710-071307] üîÑ Processing batch 1/1 for PR #7
2025/07/10 07:13:12 [bitbucket-webhook-7-20250710-071307] üîß Processing batch 1 with 5 files
2025/07/10 07:13:12 [bitbucket-webhook-7-20250710-071307] üîç Found enhanced diff context: 12 functions, 0 classes
2025/07/10 07:13:12 [bitbucket-webhook-7-20250710-071307] ü§ñ Running ai_classification agent for batch 1
2025/07/10 07:13:12 [bitbucket-webhook-7-20250710-071307] üîç Passing enhanced diff context to ai_classification agent
2025/07/10 07:13:12 [AIClassification] Processing AI classification request
2025/07/10 07:13:12 [AIClassification] Input validation - PR Title: [SCRUM-20] feat: add inventory add, delete, and reset helpers
2025/07/10 07:13:12 [AIClassification] Input validation - PR Description: No description provided.
2025/07/10 07:13:12 [bitbucket-webhook-7-20250710-071307] ü§ñ Running code_review agent for batch 1
2025/07/10 07:13:12 [bitbucket-webhook-7-20250710-071307] üîç Passing enhanced diff context to code_review agent
2025/07/10 07:13:12 [bitbucket-webhook-7-20250710-071307] üöÄ Starting streamlined code review
2025/07/10 07:13:12 [bitbucket-webhook-7-20250710-071307] ü§ñ Running jira_review agent for batch 1
2025/07/10 07:13:12 [AIClassification] Input validation - File contents count: 5
2025/07/10 07:13:12 [bitbucket-webhook-7-20250710-071307] üîç Passing enhanced diff context to jira_review agent
2025/07/10 07:13:12 [JIRAReview] Processing JIRA review request
2025/07/10 07:13:12 [AIClassification] Input validation - Diff content length: 4675
2025/07/10 07:13:12 [bitbucket-webhook-7-20250710-071307] üìä Step 1: Language Detection
2025/07/10 07:13:12 [JIRAReview] Input validation - PR Title: [SCRUM-20] feat: add inventory add, delete, and reset helpers
2025/07/10 07:13:12 [JIRAReview] Input validation - PR Description: No description provided.
2025/07/10 07:13:12 [JIRAReview] Input validation - JIRA Ticket ID: SCRUM-20
2025/07/10 07:13:12 [JIRAReview] Input validation - JIRA Description: The inventory service has been enhanced to provide comprehensive inventory management functionalities, supporting key business operations and future scalability. The new features enable seamless control over stock levels, ensuring that inventory data remains accurate and actionable across all business processes.

*Key Capabilities:*

* *Add Inventory:* Easily increase stock levels for any item, supporting restocking and procurement workflows.

* *Delete Inventory:* Remove obsolete or discontinued items from the system, keeping inventory records clean and relevant.

* *Reset Inventory:* Instantly clear all inventory data, enabling rapid resets for audits, testing, or business pivots.

* *Decrement After Sale:* Automatically reduce item quantities following sales transactions, ensuring real-time inventory accuracy and supporting sales reconciliation.

These enhancements empower the business to maintain up-to-date inventory records, reduce operational risk, and support integration with sales, procurement, and reporting systems. The modular design ensures that the system can be easily extended to support future business needs, such as integration with external databases, analytics, or automated replenishment.
2025/07/10 07:13:12 [JIRAReview] Input validation - JIRA Parent ID: 
2025/07/10 07:13:12 [JIRAReview] Input validation - JIRA Parent Description:
2025/07/10 07:13:14 [JIRAReviewAgent] Successfully read jira_review.yaml, size: 4516 bytes
2025/07/10 07:13:14 [LanguageDetection] Detected: Language=JavaScript, Framework=Express, Context=Backend, Confidence=1.00
2025/07/10 07:13:14 [AIClassification] Successfully read ai_involvement.yaml, size: 4866 bytes
2025/07/10 07:13:14 [bitbucket-webhook-7-20250710-071307] ‚úÖ Detected: JavaScript (Express) - Backend context
2025/07/10 07:13:14 [bitbucket-webhook-7-20250710-071307] üéØ Step 2: Smart Classification (Regex)
2025/07/10 07:13:15 [JIRAReviewAgent] Successfully parsed YAML, jira_review_prompt length: 4314
2025/07/10 07:13:15 [AIClassification] Successfully parsed YAML, ai_involvement_prompt length: 4659
2025/07/10 07:13:15 [AIClassification] Building prompt with input:
2025/07/10 07:13:15 [AIClassification] PR Title: [SCRUM-20] feat: add inventory add, delete, and reset helpers
2025/07/10 07:13:15 [AIClassification] PR Description: No description provided.
2025/07/10 07:13:15 [AIClassification] Number of files: 5
2025/07/10 07:13:15 [AIClassification] Diff content length: 4675
2025/07/10 07:13:15 [AIClassification] File: src/helpers/resetInventory.js, Content length: 665
2025/07/10 07:13:15 [AIClassification] File content preview: const winston = require('winston');
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports...
2025/07/10 07:13:15 [AIClassification] File: src/routes/inventory.js, Content length: 3569
2025/07/10 07:13:15 [AIClassification] File content preview: const express = require('express');
const InventoryHelper = require('../helpers/inventoryHelper');
const winston = require('winston');

const router = express.Router();
const logger = winston.createLo...
2025/07/10 07:13:15 [AIClassification] File: src/helpers/addInventory.js, Content length: 173
2025/07/10 07:13:15 [AIClassification] File content preview: const inventory = require('./inventoryHelper');
function addInventory(itemId, quantity) {
  return inventory.addItem(itemId, quantity);
}
module.exports = { addInventory }; 
2025/07/10 07:13:15 [AIClassification] File: src/helpers/deleteInventory.js, Content length: 757
2025/07/10 07:13:15 [AIClassification] File content preview: const winston = require('winston');
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports...
2025/07/10 07:13:15 [AIClassification] File: src/helpers/inventoryHelper.js, Content length: 2860
2025/07/10 07:13:15 [AIClassification] File content preview: const winston = require('winston');

// LOW: Inefficient logger configuration (duplicate configuration)
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    win...
2025/07/10 07:13:15 [AIClassification] Diff content: === DIFF FOR FILE: src/routes/inventory.js ===
context  a/src/routes/inventory.js b/src/routes/inventory.js
context    }
context  });
context  
added +// Decrement inventory after sales
added +router.post('/:itemId/decrement-after-sale', (req, res) => {
added +  try {
added +    const { itemId } = req.params;
added +    const { quantity } = req.body;
added +    if (!quantity || quantity <= 0) {
added +      return res.status(400).json({ error: 'Invalid quantity' });
added +    }
added +    const success = InventoryHelper.decrementAfterSale(itemId, quantity);
added +    if (success) {
added +      res.json({ message: 'Inventory decremented after sale successfully' });
added +    } else {
added +      res.status(400).json({ error: 'Insufficient inventory for sale' });
added +    }
added +  } catch (error) {
added +    logger.error(`Error decrementing after sale: ${error.message}`);
added +    res.status(500).json({ error: 'Failed to decrement inventory after sale' });
added +  }
added +});
added +
context  // CRITICAL: SQL Injection
context  router.get('/search/:query', (req, res) => {
context    const query = req.params.query;
context

=== DIFF FOR FILE: src/helpers/addInventory.js ===
context  a/src/helpers/addInventory.js b/src/helpers/addInventory.js
context new file mode 100644
added +const inventory = require('./inventoryHelper');
added +function addInventory(itemId, quantity) {
added +  return inventory.addItem(itemId, quantity);
added +}
added +module.exports = { addInventory }; 
context \ No newline at end of file
context

=== DIFF FOR FILE: src/helpers/deleteInventory.js ===
context  a/src/helpers/deleteInventory.js b/src/helpers/deleteInventory.js
context new file mode 100644
added +const winston = require('winston');
added +const logger = winston.createLogger({
added +  level: 'info',
added +  format: winston.format.combine(
added +    winston.format.timestamp(),
added +    winston.format.json()
added +  ),
added +  transports: [
added +    new winston.transports.File({ filename: 'delete-inventory.log' })
added +  ]
added +});
added +const inventory = require('./inventoryHelper');
added +function deleteInventory(itemId) {
added +  try {
added +    if (!inventory) return false;
added +    if (!itemId) return false;
added +    if (inventory.getItemQuantity(itemId) === 0) return false;
added +    inventory._inventory.delete(itemId);
added +    logger.info(`Deleted inventory for itemId: ${itemId}`);
added +    return true;
added +  } catch (e) {
added +    logger.error('Error deleting inventory: ' + e.message);
added +    return false;
added +  }
added +}
added +module.exports = { deleteInventory }; 
context \ No newline at end of file
context

=== DIFF FOR FILE: src/helpers/inventoryHelper.js ===
context  a/src/helpers/inventoryHelper.js b/src/helpers/inventoryHelper.js
context        quantity
context      }));
context    }
added +
added +  static decrementAfterSale(itemId, quantity) {
added +    try {
added +      const currentQuantity = inventory.get(itemId) || 0;
added +      if (currentQuantity < quantity) {
added +        logger.warn(`Not enough inventory for itemId: ${itemId} to decrement after sale`);
added +        return false;
added +      }
added +      inventory.set(itemId, currentQuantity - quantity);
added +      logger.info(`Decremented ${quantity} items for itemId: ${itemId} after sale`);
added +      return true;
added +    } catch (error) {
added +      logger.error('Error decrementing after sale: ' + error.message);
added +      return false;
added +    }
added +  }
context  }
context  
context  // CRITICAL: Exposed credentials
context

=== DIFF FOR FILE: src/helpers/resetInventory.js ===
context  a/src/helpers/resetInventory.js b/src/helpers/resetInventory.js
context new file mode 100644
added +const winston = require('winston');
added +const logger = winston.createLogger({
added +  level: 'info',
added +  format: winston.format.combine(
added +    winston.format.timestamp(),
added +    winston.format.json()
added +  ),
added +  transports: [
added +    new winston.transports.File({ filename: 'reset-inventory.log' })
added +  ]
added +});
added +const inventory = require('./inventoryHelper');
added +function resetInventory() {
added +  try {
added +    if (inventory && inventory._inventory) {
added +      inventory._inventory.clear();
added +      logger.info('Inventory reset');
added +      return true;
added +    }
added +    return false;
added +  } catch (e) {
added +    logger.error('Error resetting inventory: ' + e.message);
added +    return false;
added +  }
added +}
added +module.exports = { resetInventory }; 
context \ No newline at end of file
context
2025/07/10 07:13:15 [JIRAReview] Sending prompt to LLM provider
2025/07/10 07:13:15 [JIRAReview] LLM Provider type: *providers.OpenAIProvider
2025/07/10 07:13:15 [JIRAReview] Prompt length: 18342
2025/07/10 07:13:15 [JIRAReview] Prompt preview: ---
üìù **JIRA Ticket Context**
Ticket: SCRUM-20
Description: The inventory service has been enhanced to provide comprehensive inventory management functionalities, supporting key business operations and future scalability. The new features enable seamless control over stock levels, ensuring that inventory data remains accurate and actionable across all business processes.

*Key Capabilities:*

* *Add Inventory:* Easily increase stock levels for any item, supporting restocking and procurement workflows.

* *Delete Inventory:* Remove obsolete or discontinued items from the system, keeping inventory records clean and relevant.

* *Reset Inventory:* Instantly clear all inventory data, enabling rapid resets for audits, testing, or business pivots.

* *Decrement After Sale:* Automatically reduce item quantities following sales transactions, ensuring real-time inventory accuracy and supporting sales reconciliation.

These enhancements empower the business to maintain up-to-date inventory re...
2025/07/10 07:13:15 [AIClassification] Generated prompt length: 17710
2025/07/10 07:13:15 [AIClassification] Prompt preview: You are a pull request analysis tool.

Your ONLY task is to determine whether a pull request (PR) was **authored or significantly assisted by AI** or **written by a human**, based on its code, structure, commit messages, and patterns.

---

üß† **Evaluation Responsibilities**
- Analyze the code, commit messages, and PR structure for AI or human authorship signals.
- Consider patterns, consistency, and AI-like characteristics in the new code.
- Focus only on the added/modified lines in this PR.
...
2025/07/10 07:13:15 [AIClassification] Sending prompt to LLM provider
2025/07/10 07:13:15 [AIClassification] LLM Provider type: *providers.OpenAIProvider
2025/07/10 07:13:15 [AIClassification] Prompt length: 17710
2025/07/10 07:13:15 [AIClassification] Prompt preview: You are a pull request analysis tool.

Your ONLY task is to determine whether a pull request (PR) was **authored or significantly assisted by AI** or **written by a human**, based on its code, structure, commit messages, and patterns.

---

üß† **Evaluation Responsibilities**
- Analyze the code, commit messages, and PR structure for AI or human authorship signals.
- Consider patterns, consistency, and AI-like characteristics in the new code.
- Focus only on the added/modified lines in this PR.
...
2025/07/10 07:13:15 [SmartClassification] Detected Security with confidence 1.00
2025/07/10 07:13:15 [SmartClassification] Detected Database with confidence 0.95
2025/07/10 07:13:15 [SmartClassification] Detected API with confidence 1.00
2025/07/10 07:13:15 [SmartClassification] Detected Error Handling with confidence 0.95
2025/07/10 07:13:15 [SmartClassification] Detected Logging with confidence 0.95
2025/07/10 07:13:15 [bitbucket-webhook-7-20250710-071307] ‚úÖ Regex classified 5 categories
2025/07/10 07:13:15 [bitbucket-webhook-7-20250710-071307] üß† Step 2.5: LLM-based Classification
2025/07/10 07:13:20 [OpenAIProvider] Health updated: healthy, Error: 
2025/07/10 07:13:20 [AIClassification] Received response from LLM
2025/07/10 07:13:20 [AIClassification] Response length: 487
2025/07/10 07:13:20 [AIClassification] Response content: ```json
{
  "score": 2,
  "ai_percentage": 67,
  "reasons": [
    {
      "is_ai": true,
      "reason": "Consistent logging patterns across all modified files."
    },
    {
      "is_ai": true,
      "reason": "Repetitive and mechanical handling of basic CRUD operations without project-specific logic."
    },
    {
      "is_ai": false,
      "reason": "Inclusion of domain-specific code issues like exposed credentials and SQL injection, suggesting human oversight."
    }
  ]
}
```
2025/07/10 07:13:20 [AIClassification] Successfully parsed response
2025/07/10 07:13:20 [AIClassification] Parsed result - Score: 2.000000, AI Percentage: 67, Reasons count: 3
2025/07/10 07:13:20 [AIClassification] Successfully completed classification
2025/07/10 07:13:20 [AIClassification] Result - Score: 2.000000, AI Percentage: 67, Reasons count: 3
2025/07/10 07:13:20 [bitbucket-webhook-7-20250710-071307] ‚úÖ ai_classification agent completed in 8.116727708s
2025/07/10 07:13:20 [bitbucket-webhook-7-20250710-071307] üì§ Sent ai_classification agent result
2025/07/10 07:13:29 [OpenAIProvider] Health updated: healthy, Error: 
2025/07/10 07:13:29 [JIRAReview] Received response from LLM
2025/07/10 07:13:29 [JIRAReview] Response length: 2325
2025/07/10 07:13:29 [JIRAReview] Response content: ```markdown
JIRA Validation Results (Ticket ID: SCRUM-20):

‚úì Use Case 1: Add Inventory ‚Äì Fully Supported  
‚û°Ô∏è `src/helpers/addInventory.js` ‚Äì The `addInventory` function is implemented to add items, as described in the JIRA ticket. The function interfaces with `inventoryHelper` to increase stock levels.  
Functional Flow: Inventory

‚úì Use Case 2: Delete Inventory ‚Äì Fully Supported  
‚û°Ô∏è `src/helpers/deleteInventory.js` ‚Äì The `deleteInventory` function is included, allowing items to be removed from the inventory, thus maintaining clean and relevant records.  
Functional Flow: Inventory

‚úì Use Case 3: Reset Inventory ‚Äì Fully Supported  
‚û°Ô∏è `src/helpers/resetInventory.js` ‚Äì The `resetInventory` function is implemented to clear inventory data, which aligns with the requirement for rapid resets.  
Functional Flow: Inventory

‚úì Use Case 4: Decrement After Sale ‚Äì Fully Supported  
‚û°Ô∏è `src/routes/inventory.js`:31-44, `src/helpers/inventoryHelper.js`:12-30 ‚Äì The feature to decrement inventory after sales is implemented, providing real-time inventory accuracy post-transaction.  
Functional Flow: Inventory

---

üß™ Functional Test Case Coverage:

- Test Case: Adding valid inventory (e.g., 10 units of item A) ‚Äì Pass (Because code allows adding specified items successfully).
- Test Case: Deleting an inventory item (e.g., item A) with non-zero stock ‚Äì Pass (Because the logic supports removal of in-stock items).
- Test Case: Resetting the inventory ‚Äì Pass (Because the function correctly clears the inventory as expected).
- Test Case: Decrementing inventory after a sale of 5 units when 10 were in stock ‚Äì Pass (Because decrement logic supports it as per code).

- Test Case: Adding invalid inventory (e.g., negative quantity) ‚Äì Fail (Because input validation will return an error response).
- Test Case: Deleting an inventory item (e.g., item B) with zero stock ‚Äì Fail (Because logic prevents removal when quantity is zero, indicated by `return false` immediately when conditions aren't met).

---

üßæ Overall JIRA Validation Summary:

‚úì **JIRA Validation Passed** ‚Äì All acceptance criteria were fully met by the implemented code. The functions work as described in the ticket, covering all specified inventory management needs.  
JIRA_ACCURACY: 100%
```
2025/07/10 07:13:29 [JIRAReviewAgent] Raw response length: 2325 characters
2025/07/10 07:13:29 [JIRAReviewAgent] Raw response preview: ```markdown
JIRA Validation Results (Ticket ID: SCRUM-20):

‚úì Use Case 1: Add Inventory ‚Äì Fully Supported  
‚û°Ô∏è `src/helpers/addInventory.js` ‚Äì The `addInventory` function is implemented to add items, as described in the JIRA ticket. The function interfaces with `inventoryHelper` to increase stock levels.  
Functional Flow: Inventory

‚úì Use Case 2: Delete Inventory ‚Äì Fully Supported  
‚û°Ô∏è `src/helpers/deleteInventory.js` ‚Äì The `deleteInventory` function is included, allowing it
2025/07/10 07:13:29 [JIRAReviewAgent] Extracted accuracy: 100.0%
2025/07/10 07:13:29 [JIRAReview] Successfully parsed response
2025/07/10 07:13:29 [JIRAReview] Parsed result - Compliant: false, Findings count: 18, Accuracy: 100.0%
2025/07/10 07:13:29 [JIRAReview] Successfully completed JIRA review
2025/07/10 07:13:29 [JIRAReview] Result - Compliant: false, Findings count: 18
2025/07/10 07:13:29 [bitbucket-webhook-7-20250710-071307] ‚úÖ jira_review agent completed in 17.589938833s
2025/07/10 07:13:29 [bitbucket-webhook-7-20250710-071307] üì§ Sent jira_review agent result
2025/07/10 07:13:37 [OpenAIProvider] Health updated: healthy, Error: 
2025/07/10 07:13:37 Raw LLM response: ```json
[
  {
    "Category": "Security",
    "IsFound": "Yes",
    "Reason": "The code includes a critical comment about SQL Injection risk in the search endpoint, indicating potential security concerns."
  },
  {
    "Category": "Performance",
    "IsFound": "No",
    "Reason": "There are no changes related to performance optimization or resource management."
  },
  {
    "Category": "Database",
    "IsFound": "No",
    "Reason": "The code changes do not involve any database queries or schema modifications."
  },
  {
    "Category": "API",
    "IsFound": "Yes",
    "Reason": "New API endpoints for inventory management are added, including POST routes for decrementing inventory."
  },
  {
    "Category": "Authentication",
    "IsFound": "No",
    "Reason": "There are no changes related to user authentication mechanisms."
  },
  {
    "Category": "Input Validation",
    "IsFound": "Yes",
    "Reason": "The code includes input validation for the quantity parameter in the decrement-after-sale endpoint."
  },
  {
    "Category": "Error Handling",
    "IsFound": "Yes",
    "Reason": "Try-catch blocks are used for error handling in the new inventory helper functions."
  },
  {
    "Category": "Logging",
    "IsFound": "Yes",
    "Reason": "Logging is implemented using Winston for inventory operations, including error and info logs."
  },
  {
    "Category": "Testing",
    "IsFound": "No",
    "Reason": "There are no test cases or testing frameworks mentioned or modified in the code changes."
  },
  {
    "Category": "Documentation",
    "IsFound": "No",
    "Reason": "No documentation or comments were added or modified in the code changes."
  },
  {
    "Category": "Maintainability",
    "IsFound": "Yes",
    "Reason": "The code introduces modular helper functions, which improve code organization and maintainability."
  },
  {
    "Category": "Architecture",
    "IsFound": "No",
    "Reason": "There are no significant architectural changes or design patterns introduced in the code changes."
  },
  {
    "Category": "Compliance",
    "IsFound": "No",
    "Reason": "There are no changes related to compliance with regulations or standards."
  },
  {
    "Category": "DevOps",
    "IsFound": "No",
    "Reason": "There are no changes related to deployment, CI/CD, or infrastructure."
  },
  {
    "Category": "Mobile Development",
    "IsFound": "No",
    "Reason": "The code changes are related to backend services and do not involve mobile development."
  },
  {
    "Category": "Cloud Computing",
    "IsFound": "No",
    "Reason": "There are no changes related to cloud services or cloud infrastructure."
  },
  {
    "Category": "Machine Learning",
    "IsFound": "No",
    "Reason": "The code changes do not involve any machine learning components or algorithms."
  },
  {
    "Category": "Frontend",
    "IsFound": "No",
    "Reason": "The changes are focused on backend services and do not involve frontend code."
  },
  {
    "Category": "Backend",
    "IsFound": "Yes",
    "Reason": "The changes involve backend logic for inventory management, including new helper functions and routes."
  },
  {
    "Category": "Programming Languages",
    "IsFound": "No",
    "Reason": "The changes are within the same programming language (JavaScript) and do not introduce new languages."
  },
  {
    "Category": "Accessibility",
    "IsFound": "No",
    "Reason": "The code changes do not involve user interfaces or accessibility features."
  },
  {
    "Category": "Internationalization",
    "IsFound": "No",
    "Reason": "There are no changes related to internationalization or localization."
  },
  {
    "Category": "Maintenance",
    "IsFound": "Yes",
    "Reason": "The introduction of helper functions and logging improves the maintainability of the codebase."
  }
]
```
2025/07/10 07:13:37 Cleaned response: [
  {
    "Category": "Security",
    "IsFound": "Yes",
    "Reason": "The code includes a critical comment about SQL Injection risk in the search endpoint, indicating potential security concerns."
  },
  {
    "Category": "Performance",
    "IsFound": "No",
    "Reason": "There are no changes related to performance optimization or resource management."
  },
  {
    "Category": "Database",
    "IsFound": "No",
    "Reason": "The code changes do not involve any database queries or schema modifications."
  },
  {
    "Category": "API",
    "IsFound": "Yes",
    "Reason": "New API endpoints for inventory management are added, including POST routes for decrementing inventory."
  },
  {
    "Category": "Authentication",
    "IsFound": "No",
    "Reason": "There are no changes related to user authentication mechanisms."
  },
  {
    "Category": "Input Validation",
    "IsFound": "Yes",
    "Reason": "The code includes input validation for the quantity parameter in the decrement-after-sale endpoint."
  },
  {
    "Category": "Error Handling",
    "IsFound": "Yes",
    "Reason": "Try-catch blocks are used for error handling in the new inventory helper functions."
  },
  {
    "Category": "Logging",
    "IsFound": "Yes",
    "Reason": "Logging is implemented using Winston for inventory operations, including error and info logs."
  },
  {
    "Category": "Testing",
    "IsFound": "No",
    "Reason": "There are no test cases or testing frameworks mentioned or modified in the code changes."
  },
  {
    "Category": "Documentation",
    "IsFound": "No",
    "Reason": "No documentation or comments were added or modified in the code changes."
  },
  {
    "Category": "Maintainability",
    "IsFound": "Yes",
    "Reason": "The code introduces modular helper functions, which improve code organization and maintainability."
  },
  {
    "Category": "Architecture",
    "IsFound": "No",
    "Reason": "There are no significant architectural changes or design patterns introduced in the code changes."
  },
  {
    "Category": "Compliance",
    "IsFound": "No",
    "Reason": "There are no changes related to compliance with regulations or standards."
  },
  {
    "Category": "DevOps",
    "IsFound": "No",
    "Reason": "There are no changes related to deployment, CI/CD, or infrastructure."
  },
  {
    "Category": "Mobile Development",
    "IsFound": "No",
    "Reason": "The code changes are related to backend services and do not involve mobile development."
  },
  {
    "Category": "Cloud Computing",
    "IsFound": "No",
    "Reason": "There are no changes related to cloud services or cloud infrastructure."
  },
  {
    "Category": "Machine Learning",
    "IsFound": "No",
    "Reason": "The code changes do not involve any machine learning components or algorithms."
  },
  {
    "Category": "Frontend",
    "IsFound": "No",
    "Reason": "The changes are focused on backend services and do not involve frontend code."
  },
  {
    "Category": "Backend",
    "IsFound": "Yes",
    "Reason": "The changes involve backend logic for inventory management, including new helper functions and routes."
  },
  {
    "Category": "Programming Languages",
    "IsFound": "No",
    "Reason": "The changes are within the same programming language (JavaScript) and do not introduce new languages."
  },
  {
    "Category": "Accessibility",
    "IsFound": "No",
    "Reason": "The code changes do not involve user interfaces or accessibility features."
  },
  {
    "Category": "Internationalization",
    "IsFound": "No",
    "Reason": "There are no changes related to internationalization or localization."
  },
  {
    "Category": "Maintenance",
    "IsFound": "Yes",
    "Reason": "The introduction of helper functions and logging improves the maintainability of the codebase."
  }
]
2025/07/10 07:13:37 Successfully parsed as JSON array with 23 items
2025/07/10 07:13:37 Added LLM category: Security - The code includes a critical comment about SQL Injection risk in the search endpoint, indicating potential security concerns.
2025/07/10 07:13:37 Added LLM category: API - New API endpoints for inventory management are added, including POST routes for decrementing inventory.
2025/07/10 07:13:37 Added LLM category: Input Validation - The code includes input validation for the quantity parameter in the decrement-after-sale endpoint.
2025/07/10 07:13:37 Added LLM category: Error Handling - Try-catch blocks are used for error handling in the new inventory helper functions.
2025/07/10 07:13:37 Added LLM category: Logging - Logging is implemented using Winston for inventory operations, including error and info logs.
2025/07/10 07:13:37 Added LLM category: Maintainability - The code introduces modular helper functions, which improve code organization and maintainability.
2025/07/10 07:13:37 Added LLM category: Backend - The changes involve backend logic for inventory management, including new helper functions and routes.
2025/07/10 07:13:37 Added LLM category: Maintenance - The introduction of helper functions and logging improves the maintainability of the codebase.
2025/07/10 07:13:37 [bitbucket-webhook-7-20250710-071307] ‚úÖ LLM classified 8 categories
2025/07/10 07:13:37 [bitbucket-webhook-7-20250710-071307] üîó Step 2.6: Combining and Deduplicating Categories
2025/07/10 07:16:00 [bitbucket-webhook-7-20250710-071307] ‚úÖ Final combined categories: 9
2025/07/10 07:16:00 [bitbucket-webhook-7-20250710-071307] üîç Step 3: Multi-Stage Vector Database Search
2025/07/10 07:16:05 [CodeReview] üöÄ Starting multi-stage vector database search
2025/07/10 07:16:05 [CodeReview] Using project analyzer type: openai
2025/07/10 07:16:05 [CodeReview] üéØ Stage 1: Category-level prompt search
2025/07/10 07:16:05 [CodeReview] üîç Searching prompts for query: Detected Error Handling patterns in JavaScript code. This category focuses on Error Handling best pr (category: Error Handling, limit: 8)
2025/07/10 07:16:05 [CodeReview] ‚ö†Ô∏è  PromptService not available, using SimplifiedPromptService fallback
2025/07/10 07:16:05 [SimplifiedPromptService] Retrieved 1 prompts for 1 categories
2025/07/10 07:16:05 [CodeReview] ‚úÖ Found 1 prompts for query
2025/07/10 07:16:05 [CodeReview] Found category prompt:  (category: Error Handling, score: 0.800)
2025/07/10 07:16:05 [CodeReview] üîç Searching prompts for query: The code introduces modular helper functions, which improve code organization and maintainability. [ (category: Maintainability, limit: 8)
2025/07/10 07:16:05 [CodeReview] ‚ö†Ô∏è  PromptService not available, using SimplifiedPromptService fallback
2025/07/10 07:16:05 [SimplifiedPromptService] Retrieved 0 prompts for 1 categories
2025/07/10 07:16:05 [CodeReview] ‚úÖ Found 0 prompts for query
2025/07/10 07:16:05 [CodeReview] üîç Searching prompts for query: The changes involve backend logic for inventory management, including new helper functions and route (category: Backend, limit: 8)
2025/07/10 07:16:05 [CodeReview] ‚ö†Ô∏è  PromptService not available, using SimplifiedPromptService fallback
2025/07/10 07:16:05 [SimplifiedPromptService] Retrieved 1 prompts for 1 categories
2025/07/10 07:16:05 [CodeReview] ‚úÖ Found 1 prompts for query
2025/07/10 07:16:05 [CodeReview] üîç Searching prompts for query: The introduction of helper functions and logging improves the maintainability of the codebase. [Lang (category: Maintenance, limit: 8)
2025/07/10 07:16:05 [CodeReview] ‚ö†Ô∏è  PromptService not available, using SimplifiedPromptService fallback
2025/07/10 07:16:05 [SimplifiedPromptService] Retrieved 0 prompts for 1 categories
2025/07/10 07:16:05 [CodeReview] ‚úÖ Found 0 prompts for query
2025/07/10 07:16:05 [CodeReview] üîç Searching prompts for query: Detected Security patterns in JavaScript code. This category focuses on Security best practices and  (category: Security, limit: 8)
2025/07/10 07:16:05 [CodeReview] ‚ö†Ô∏è  PromptService not available, using SimplifiedPromptService fallback
2025/07/10 07:16:05 [SimplifiedPromptService] Retrieved 1 prompts for 1 categories
2025/07/10 07:16:05 [CodeReview] ‚úÖ Found 1 prompts for query
2025/07/10 07:16:05 [CodeReview] Found category prompt:  (category: Security, score: 0.950)
2025/07/10 07:16:05 [CodeReview] üîç Searching prompts for query: Detected Database patterns in JavaScript code. This category focuses on Database best practices and  (category: Database, limit: 8)
2025/07/10 07:16:05 [CodeReview] ‚ö†Ô∏è  PromptService not available, using SimplifiedPromptService fallback
2025/07/10 07:16:05 [SimplifiedPromptService] Retrieved 1 prompts for 1 categories
2025/07/10 07:16:05 [CodeReview] ‚úÖ Found 1 prompts for query
2025/07/10 07:16:05 [CodeReview] Found category prompt:  (category: Database, score: 0.900)
2025/07/10 07:16:05 [CodeReview] üîç Searching prompts for query: The code includes input validation for the quantity parameter in the decrement-after-sale endpoint.  (category: Input Validation, limit: 8)
2025/07/10 07:16:05 [CodeReview] ‚ö†Ô∏è  PromptService not available, using SimplifiedPromptService fallback
2025/07/10 07:16:05 [SimplifiedPromptService] Retrieved 1 prompts for 1 categories
2025/07/10 07:16:05 [CodeReview] ‚úÖ Found 1 prompts for query
2025/07/10 07:16:05 [CodeReview] Found category prompt:  (category: Input Validation, score: 0.850)
2025/07/10 07:16:05 [CodeReview] üîç Searching prompts for query: Detected API patterns in JavaScript code. This category focuses on API best practices and potential  (category: API, limit: 8)
2025/07/10 07:16:05 [CodeReview] ‚ö†Ô∏è  PromptService not available, using SimplifiedPromptService fallback
2025/07/10 07:16:05 [SimplifiedPromptService] Retrieved 1 prompts for 1 categories
2025/07/10 07:16:05 [CodeReview] ‚úÖ Found 1 prompts for query
2025/07/10 07:16:05 [CodeReview] Found category prompt:  (category: API, score: 0.900)
2025/07/10 07:16:05 [CodeReview] üîç Searching prompts for query: Detected Logging patterns in JavaScript code. This category focuses on Logging best practices and po (category: Logging, limit: 8)
2025/07/10 07:16:05 [CodeReview] ‚ö†Ô∏è  PromptService not available, using SimplifiedPromptService fallback
2025/07/10 07:16:05 [SimplifiedPromptService] Retrieved 1 prompts for 1 categories
2025/07/10 07:16:05 [CodeReview] ‚úÖ Found 1 prompts for query
2025/07/10 07:16:05 [CodeReview] Found category prompt:  (category: Logging, score: 0.800)
2025/07/10 07:16:13 [CodeReview] üéØ Stage 2: PR description vector search
2025/07/10 07:16:13 [CodeReview] üîç Searching prompts for query: Title: [SCRUM-20] feat: add inventory add, delete, and reset helpers
Description: No description pro (category: , limit: 10)
2025/07/10 07:16:13 [CodeReview] ‚ö†Ô∏è  PromptService not available, using SimplifiedPromptService fallback
2025/07/10 07:16:13 [SimplifiedPromptService] Retrieved 0 prompts for 1 categories
2025/07/10 07:16:13 [CodeReview] ‚úÖ Found 0 prompts for query
2025/07/10 07:16:13 [CodeReview][DEBUG] PR Description search returned 0 results
2025/07/10 07:16:13 [CodeReview] üéØ Stage 3: Diff content vector search
2025/07/10 07:16:13 [CodeReview] üîç Searching prompts for query: Code changes: === DIFF FOR FILE: src/routes/inventory.js ===
context  a/src/routes/inventory.js b/sr (category: , limit: 10)
2025/07/10 07:16:13 [CodeReview] ‚ö†Ô∏è  PromptService not available, using SimplifiedPromptService fallback
2025/07/10 07:16:13 [SimplifiedPromptService] Retrieved 3 prompts for 3 categories
2025/07/10 07:16:13 [CodeReview] ‚úÖ Found 3 prompts for query
2025/07/10 07:16:13 [CodeReview][DEBUG] Diff Content search returned 3 results
2025/07/10 07:16:13 [CodeReview][DEBUG] Diff Result 1: ID='security/javascript-security.yaml', Name='', Category='Security', Score=0.950000
2025/07/10 07:16:13 [CodeReview] Enhanced existing prompt:  (category: Security, combined score: 0.950)
2025/07/10 07:16:13 [CodeReview][DEBUG] Diff Result 2: ID='database/javascript-database.yaml', Name='', Category='Database', Score=0.900000
2025/07/10 07:16:13 [CodeReview] Enhanced existing prompt:  (category: Database, combined score: 0.900)
2025/07/10 07:16:13 [CodeReview][DEBUG] Diff Result 3: ID='frontend/javascript-frontend.yaml', Name='', Category='Frontend', Score=0.850000
2025/07/10 07:16:13 [CodeReview] Found diff prompt:  (category: Frontend, score: 0.850)
2025/07/10 07:16:13 [CodeReview] üéØ Stage 4: JIRA info vector search
2025/07/10 07:16:13 [CodeReview] üîç Searching prompts for query: JIRA ID: SCRUM-20
Description: The inventory service has been enhanced to provide comprehensive inve (category: , limit: 8)
2025/07/10 07:16:13 [CodeReview] ‚ö†Ô∏è  PromptService not available, using SimplifiedPromptService fallback
2025/07/10 07:16:13 [SimplifiedPromptService] Retrieved 4 prompts for 4 categories
2025/07/10 07:16:13 [CodeReview] ‚úÖ Found 4 prompts for query
2025/07/10 07:16:13 [CodeReview][DEBUG] JIRA Info search returned 4 results
2025/07/10 07:16:13 [CodeReview][DEBUG] JIRA Result 1: ID='database/javascript-database.yaml', Name='', Category='Database', Score=0.900000
2025/07/10 07:16:13 [CodeReview] Enhanced existing prompt:  (category: Database, combined score: 0.900)
2025/07/10 07:16:13 [CodeReview][DEBUG] JIRA Result 2: ID='backend/javascript-api.yaml', Name='', Category='API', Score=0.900000
2025/07/10 07:16:13 [CodeReview] Enhanced existing prompt:  (category: API, combined score: 0.900)
2025/07/10 07:16:13 [CodeReview][DEBUG] JIRA Result 3: ID='backend/javascript-backend.yaml', Name='', Category='Backend', Score=0.850000
2025/07/10 07:16:13 [CodeReview] Found JIRA prompt:  (category: Backend, score: 0.850)
2025/07/10 07:16:13 [CodeReview][DEBUG] JIRA Result 4: ID='testing/javascript-testing.yaml', Name='', Category='Testing', Score=0.850000
2025/07/10 07:16:13 [CodeReview] Found JIRA prompt:  (category: Testing, score: 0.850)
2025/07/10 07:16:13 [CodeReview] üéØ Stage 5: Consolidating all results
2025/07/10 07:16:13 [CodeReview] ‚úÖ Multi-stage vector search completed in 8.557457375s
2025/07/10 07:16:13 [CodeReview] üìä Found 9 unique prompts from multi-stage search
2025/07/10 07:16:13 [bitbucket-webhook-7-20250710-071307] ‚úÖ Retrieved 9 prompts from multi-stage search
2025/07/10 07:16:13 [bitbucket-webhook-7-20250710-071307] üìù Step 4: Review Generation
2025/07/10 07:16:20 [CodeReview] üîç Sending review prompt to LLM (length: 8087)
2025/07/10 07:16:20 [CodeReview] üìù Prompt preview: # Code Review Request

**Language:** JavaScript
**Framework:** Express
**Context:** Backend

## Detected Categories

- **Error Handling** (0.95 confidence): Detected Error Handling patterns in JavaScript code. This category focuses on Error Handling best practices and potential issues.
- **Maintainability** (0.80 confidence): The code introduces modular helper functions, which improve code organization and maintainability.
- **Backend** (0.80 confidence): The changes involve backend logic for in
2025/07/10 07:16:35 [OpenAIProvider] Health updated: healthy, Error: 
2025/07/10 07:16:35 [CodeReview] ‚úÖ Received LLM response (length: 2595)
2025/07/10 07:16:35 [CodeReview] üìù LLM Response preview: ```json
{
  "batch_results": [
    {
      "batch_number": 1,
      "issues": {
        "critical": [
          {
            "file": "src/routes/inventory.js",
            "line": 1,
            "issue": "Potential SQL Injection vulnerability in search endpoint.",
            "category": "Security",
            "suggestion": "Use parameterized queries or ORM to prevent SQL Injection."
          },
          {
            "file": "src/helpers/inventoryHelper.js",
            "line": 1,
2025/07/10 07:16:35 [CodeReview] ‚úÖ Successfully parsed review response
2025/07/10 07:16:35 [CodeReview] üìä Review summary - Critical: 2, Medium: 3, Low: 3
2025/07/10 07:16:35 [bitbucket-webhook-7-20250710-071307] ‚úÖ Streamlined review completed in 3m23.062800666s
2025/07/10 07:16:35 [bitbucket-webhook-7-20250710-071307] üìä Metrics - Classification Accuracy: 0.89, Prompt Relevance: 0.86
2025/07/10 07:16:35 [bitbucket-webhook-7-20250710-071307] ‚úÖ code_review agent completed in 3m23.062933875s
2025/07/10 07:16:35 [bitbucket-webhook-7-20250710-071307] üì§ Sent code_review agent result
2025/07/10 07:16:35 [Orchestrator] ‚ö†Ô∏è  Creating fallback empty batch review
2025/07/10 07:16:35 [bitbucket-webhook-7-20250710-071307] ‚úÖ Batch 1 processing completed successfully
2025/07/10 07:16:35 [bitbucket-webhook-7-20250710-071307] ‚úÖ Batch 1 completed in 3m23.06316025s
2025/07/10 07:16:35 [bitbucket-webhook-7-20250710-071307] üì§ Sent batch 1 result
2025/07/10 07:16:35 [bitbucket-webhook-7-20250710-071307] üìä Batch processing summary: 1 successful, 0 failed
2025/07/10 07:16:35 [bitbucket-webhook-7-20250710-071307] üéØ Processing JIRA review for PR #7
2025/07/10 07:16:35 [bitbucket-webhook-7-20250710-071307] üéØ Starting JIRA review for PR #7 with complete PR content
2025/07/10 07:16:35 [bitbucket-webhook-7-20250710-071307] üì¶ Collecting content from batch 1/1
2025/07/10 07:16:35 [bitbucket-webhook-7-20250710-071307] üéØ JIRA review input prepared: 5 files, 0 related files, 4698 diff chars
2025/07/10 07:16:35 [JIRAReview] Processing JIRA review request
2025/07/10 07:16:35 [JIRAReview] Input validation - PR Title: [SCRUM-20] feat: add inventory add, delete, and reset helpers
2025/07/10 07:16:35 [JIRAReview] Input validation - PR Description: No description provided.
2025/07/10 07:16:35 [JIRAReview] Input validation - JIRA Ticket ID: SCRUM-20
2025/07/10 07:16:35 [JIRAReview] Input validation - JIRA Description: The inventory service has been enhanced to provide comprehensive inventory management functionalities, supporting key business operations and future scalability. The new features enable seamless control over stock levels, ensuring that inventory data remains accurate and actionable across all business processes.

*Key Capabilities:*

* *Add Inventory:* Easily increase stock levels for any item, supporting restocking and procurement workflows.

* *Delete Inventory:* Remove obsolete or discontinued items from the system, keeping inventory records clean and relevant.

* *Reset Inventory:* Instantly clear all inventory data, enabling rapid resets for audits, testing, or business pivots.

* *Decrement After Sale:* Automatically reduce item quantities following sales transactions, ensuring real-time inventory accuracy and supporting sales reconciliation.

These enhancements empower the business to maintain up-to-date inventory records, reduce operational risk, and support integration with sales, procurement, and reporting systems. The modular design ensures that the system can be easily extended to support future business needs, such as integration with external databases, analytics, or automated replenishment.
2025/07/10 07:16:35 [JIRAReview] Input validation - JIRA Parent ID: 
2025/07/10 07:16:35 [JIRAReview] Input validation - JIRA Parent Description: 
2025/07/10 07:16:35 [JIRAReviewAgent] Successfully read jira_review.yaml, size: 4516 bytes
2025/07/10 07:16:35 [JIRAReviewAgent] Successfully parsed YAML, jira_review_prompt length: 4314
2025/07/10 07:16:35 [JIRAReview] Sending prompt to LLM provider
2025/07/10 07:16:35 [JIRAReview] LLM Provider type: *providers.OpenAIProvider
2025/07/10 07:16:35 [JIRAReview] Prompt length: 18365
2025/07/10 07:16:35 [JIRAReview] Prompt preview: ---
üìù **JIRA Ticket Context**
Ticket: SCRUM-20
Description: The inventory service has been enhanced to provide comprehensive inventory management functionalities, supporting key business operations and future scalability. The new features enable seamless control over stock levels, ensuring that inventory data remains accurate and actionable across all business processes.

*Key Capabilities:*

* *Add Inventory:* Easily increase stock levels for any item, supporting restocking and procurement workflows.

* *Delete Inventory:* Remove obsolete or discontinued items from the system, keeping inventory records clean and relevant.

* *Reset Inventory:* Instantly clear all inventory data, enabling rapid resets for audits, testing, or business pivots.

* *Decrement After Sale:* Automatically reduce item quantities following sales transactions, ensuring real-time inventory accuracy and supporting sales reconciliation.

These enhancements empower the business to maintain up-to-date inventory re...
2025/07/10 07:16:49 [OpenAIProvider] Health updated: healthy, Error: 
2025/07/10 07:16:49 [JIRAReview] Received response from LLM
2025/07/10 07:16:49 [JIRAReview] Response length: 2602
2025/07/10 07:16:49 [JIRAReview] Response content: ```markdown
JIRA Validation Results (Ticket ID: SCRUM-20):

‚úì Use Case 1: Add Inventory ‚Äì Fully Supported  
‚û°Ô∏è `src/routes/inventory.js:50-62` ‚Äì The code in this section supports adding inventory items with a specified quantity to the system. The function `addItem` is called to update the inventory, which aligns with the AC of enabling addition to stock levels.  
Functional Flow: Inventory

‚úì Use Case 2: Delete Inventory ‚Äì Fully Supported  
‚û°Ô∏è `src/helpers/deleteInventory.js:8-28` ‚Äì The code provides functionality to delete inventory items, including checks for item existence and non-zero quantity, aligning with the AC of handling deletions of obsolete items.  
Functional Flow: Inventory

‚úì Use Case 3: Reset Inventory ‚Äì Fully Supported  
‚û°Ô∏è `src/helpers/resetInventory.js:8-28` ‚Äì The implementation allows resetting the entire inventory, clearing all entries, fulfilling the AC regarding rapid resets.  
Functional Flow: Inventory

‚úì Use Case 4: Decrement After Sale ‚Äì Fully Supported  
‚û°Ô∏è `src/routes/inventory.js:64-78` and `src/helpers/inventoryHelper.js:28-42` ‚Äì The endpoint and helper function support the automatic decrement of inventory following a sale, with validation for quantity sufficiency, aligning with the AC for real-time updates post-sale.  
Functional Flow: Inventory

---

üß™ Functional Test Case Coverage:

- Test Case: Adding 10 units of an item to inventory ‚Äì Pass (Code processes and adds successfully if the quantity > 0).
- Test Case: Deleting an existing item with non-zero inventory ‚Äì Pass (Item is deleted, logs success, and returns true).
- Test Case: Reset the entire inventory map ‚Äì Pass (Inventory is cleared and logged appropriately).
- Test Case: Decrement inventory by 5 for a sale transaction ‚Äì Pass (Provided sufficient current inventory; code decrements and logs accordingly).

- Test Case: Adding 0 units of an item to inventory ‚Äì Fail (Code responds with "Invalid quantity", refusing to add zero items).
- Test Case: Deleting a non-existent item or an item with zero inventory ‚Äì Fail (Returns false and logs a warning or error as specified).
- Test Case: Resetting when inventory map is undefined or already empty ‚Äì Fail (Returns false per current logic).
- Test Case: Decrement inventory more than available ‚Äì Fail (Returns an error "Insufficient inventory for sale").

---

üßæ Overall JIRA Validation Summary:

‚úì **JIRA Validation Passed** ‚Äì All Use Cases are fully supported by the code with accurate functionality implemented as per the acceptance criteria. 
JIRA_ACCURACY: 100%
```
2025/07/10 07:16:49 [JIRAReviewAgent] Raw response length: 2602 characters
2025/07/10 07:16:49 [JIRAReviewAgent] Raw response preview: ```markdown
JIRA Validation Results (Ticket ID: SCRUM-20):

‚úì Use Case 1: Add Inventory ‚Äì Fully Supported  
‚û°Ô∏è `src/routes/inventory.js:50-62` ‚Äì The code in this section supports adding inventory items with a specified quantity to the system. The function `addItem` is called to update the inventory, which aligns with the AC of enabling addition to stock levels.  
Functional Flow: Inventory

‚úì Use Case 2: Delete Inventory ‚Äì Fully Supported  
‚û°Ô∏è `src/helpers/deleteInventory.js:8-
2025/07/10 07:16:49 [JIRAReviewAgent] Extracted accuracy: 100.0%
2025/07/10 07:16:49 [JIRAReview] Successfully parsed response
2025/07/10 07:16:49 [JIRAReview] Parsed result - Compliant: false, Findings count: 19, Accuracy: 100.0%
2025/07/10 07:16:49 [JIRAReview] Successfully completed JIRA review
2025/07/10 07:16:49 [JIRAReview] Result - Compliant: false, Findings count: 19
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] ‚úÖ JIRA review completed in 14.374306167s
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üîó Consolidating 1 batch results with JIRA review
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üì¶ Processing batch 1 results
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üéØ Processing JIRA review results
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üéØ JIRA result data keys: [compliant findings accuracy]
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing 19 findings from JIRA review
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 1: JIRA Validation Results (Ticket ID: SCRUM-20):
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 2: ‚úì Use Case 1: Add Inventory ‚Äì Fully Supported
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 3: ‚û°Ô∏è `src/routes/inventory.js:50-62` ‚Äì The code in this section supports adding inventory items with a specified quantity to the system. The function `addItem` is called to update the inventory, which aligns with the AC of enabling addition to stock levels.
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 4: ‚úì Use Case 2: Delete Inventory ‚Äì Fully Supported
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 5: ‚úì Use Case 3: Reset Inventory ‚Äì Fully Supported
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 6: ‚û°Ô∏è `src/helpers/resetInventory.js:8-28` ‚Äì The implementation allows resetting the entire inventory, clearing all entries, fulfilling the AC regarding rapid resets.
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 7: ‚úì Use Case 4: Decrement After Sale ‚Äì Fully Supported
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 8: üßæ Overall JIRA Validation Summary:
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 9: ‚úì **JIRA Validation Passed** ‚Äì All Use Cases are fully supported by the code with accurate functionality implemented as per the acceptance criteria.
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 10: ---
Test Cases:
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 11: ‚úÖ Test Case: Adding 10 units of an item to inventory ‚Äì Pass (Code processes and adds successfully if the quantity > 0).
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 12: ‚úÖ Test Case: Deleting an existing item with non-zero inventory ‚Äì Pass (Item is deleted, logs success, and returns true).
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 13: ‚úÖ Test Case: Reset the entire inventory map ‚Äì Pass (Inventory is cleared and logged appropriately).
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 14: ‚úÖ Test Case: Decrement inventory by 5 for a sale transaction ‚Äì Pass (Provided sufficient current inventory; code decrements and logs accordingly).
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 15: ‚ùå Test Case: Adding 0 units of an item to inventory ‚Äì Fail (Code responds with "Invalid quantity", refusing to add zero items).
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 16: ‚ùå Test Case: Deleting a non-existent item or an item with zero inventory ‚Äì Fail (Returns false and logs a warning or error as specified).
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 17: ‚ùå Test Case: Resetting when inventory map is undefined or already empty ‚Äì Fail (Returns false per current logic).
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 18: ‚ùå Test Case: Decrement inventory more than available ‚Äì Fail (Returns an error "Insufficient inventory for sale").
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üìã Processing finding 19: JIRA_ACCURACY: 100%
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] üéØ Extracted accuracy: 100.0%
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] ‚ö†Ô∏è  No test cases found in JIRA result data
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] ‚ö†Ô∏è  No compliance status found in JIRA result data
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] ‚ö†Ô∏è  No test case pass status found in JIRA result data
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] ‚úÖ Consolidation completed: Critical=0, Medium=0, Low=0, JIRA=true, Files=5
2025/07/10 07:16:49 [bitbucket-webhook-7-20250710-071307] ‚úÖ Orchestrator processing completed for PR #7 in 3m37.439471s (1/1 batches successful)
2025/07/10 07:16:49 ‚úÖ Agent processing completed for PR #7
2025/07/10 07:16:49 [Bitbucket][PR_COMMENT] URL: https://api.bitbucket.org/2.0/repositories/qdexconsulting/inventory-service/pullrequests/7/comments
2025/07/10 07:16:49 [Bitbucket][PR_COMMENT] Payload: {"content":{"raw":"# ü§ñ AI Analysis Report\n\n---\n\n## üîç AI Involvement Classification\n\n**Result:** AI Authored\n**AI Code Percentage:** 67%\n\n**Analysis Reasons:**\n\n‚Ä¢ Repetitive patterns across unrelated files, such as identical logger configurations.\n‚Ä¢ Mechanical consistency in naming, formatting, and code structure across multiple helper files, suggesting templated code.\n‚Ä¢ Use of hardcoded credentials and logging inconsistencies, indicating human oversight and errors.\n\n---\n\n## üîç AI Code Review\n\n**Status:** completed\n\n## üìä Total Issues Found\n\n| Severity | Count |\n|----------|-------|\n| Critical | 0 |\n| Medium | 0 |\n| Low | 0 |\n\n**JIRA Accuracy:** 100%\n\n---\n\n---\n\n## üéØ JIRA Requirements Validation\n\nüéØ **JIRA Requirements Validation**\n\nüìä **Compliance Status:** ‚ùå Non-Compliant\nüéØ **Accuracy:** 100.0%\n‚úÖ **Test Cases Pass:** ‚úÖ All Pass\n\nüîç **Findings:**\n‚Ä¢ JIRA Validation Results (Ticket ID: SCRUM-20):\n‚Ä¢ ‚úì Use Case 1: Add Inventory ‚Äì Fully Supported\n‚Ä¢ ‚û°Ô∏è `src/routes/inventory.js:50-62` ‚Äì The code in this section supports adding inventory items with a specified quantity to the system. The function `addItem` is called to update the inventory, which aligns with the AC of enabling addition to stock levels.\n‚Ä¢ ‚úì Use Case 2: Delete Inventory ‚Äì Fully Supported\n‚Ä¢ ‚úì Use Case 3: Reset Inventory ‚Äì Fully Supported\n‚Ä¢ ‚û°Ô∏è `src/helpers/resetInventory.js:8-28` ‚Äì The implementation allows resetting the entire inventory, clearing all entries, fulfilling the AC regarding rapid resets.\n‚Ä¢ ‚úì Use Case 4: Decrement After Sale ‚Äì Fully Supported\n‚Ä¢ üßæ Overall JIRA Validation Summary:\n‚Ä¢ ‚úì **JIRA Validation Passed** ‚Äì All Use Cases are fully supported by the code with accurate functionality implemented as per the acceptance criteria.\n‚Ä¢ ---\nTest Cases:\n‚Ä¢ ‚úÖ Test Case: Adding 10 units of an item to inventory ‚Äì Pass (Code processes and adds successfully if the quantity \u003e 0).\n‚Ä¢ ‚úÖ Test Case: Deleting an existing item with non-zero inventory ‚Äì Pass (Item is deleted, logs success, and returns true).\n‚Ä¢ ‚úÖ Test Case: Reset the entire inventory map ‚Äì Pass (Inventory is cleared and logged appropriately).\n‚Ä¢ ‚úÖ Test Case: Decrement inventory by 5 for a sale transaction ‚Äì Pass (Provided sufficient current inventory; code decrements and logs accordingly).\n‚Ä¢ ‚ùå Test Case: Adding 0 units of an item to inventory ‚Äì Fail (Code responds with \"Invalid quantity\", refusing to add zero items).\n‚Ä¢ ‚ùå Test Case: Deleting a non-existent item or an item with zero inventory ‚Äì Fail (Returns false and logs a warning or error as specified).\n‚Ä¢ ‚ùå Test Case: Resetting when inventory map is undefined or already empty ‚Äì Fail (Returns false per current logic).\n‚Ä¢ ‚ùå Test Case: Decrement inventory more than available ‚Äì Fail (Returns an error \"Insufficient inventory for sale\").\n‚Ä¢ JIRA_ACCURACY: 100%\n\n\n---\n\n*This analysis was performed automatically by the AI Code Analysis Service*\n"}}
2025/07/10 07:16:50 [Bitbucket][PR_COMMENT] Response status: 201, body: {"id": 655281390, "created_on": "2025-07-09T23:16:50.120096+00:00", "updated_on": "2025-07-09T23:16:50.122382+00:00", "content": {"type": "rendered", "raw": "# ü§ñ AI Analysis Report\n\n---\n\n## üîç AI Involvement Classification\n\n**Result:** AI Authored\n**AI Code Percentage:** 67%\n\n**Analysis Reasons:**\n\n‚Ä¢ Repetitive patterns across unrelated files, such as identical logger configurations.\n‚Ä¢ Mechanical consistency in naming, formatting, and code structure across multiple helper files, suggesting templated code.\n‚Ä¢ Use of hardcoded credentials and logging inconsistencies, indicating human oversight and errors.\n\n---\n\n## üîç AI Code Review\n\n**Status:** completed\n\n## üìä Total Issues Found\n\n| Severity | Count |\n|----------|-------|\n| Critical | 0 |\n| Medium | 0 |\n| Low | 0 |\n\n**JIRA Accuracy:** 100%\n\n---\n\n---\n\n## üéØ JIRA Requirements Validation\n\nüéØ **JIRA Requirements Validation**\n\nüìä **Compliance Status:** ‚ùå Non-Compliant\nüéØ **Accuracy:** 100.0%\n‚úÖ **Test Cases Pass:** ‚úÖ All Pass\n\nüîç **Findings:**\n‚Ä¢ JIRA Validation Results (Ticket ID: SCRUM-20):\n‚Ä¢ ‚úì Use Case 1: Add Inventory ‚Äì Fully Supported\n‚Ä¢ ‚û°Ô∏è `src/routes/inventory.js:50-62` ‚Äì The code in this section supports adding inventory items with a specified quantity to the system. The function `addItem` is called to update the inventory, which aligns with the AC of enabling addition to stock levels.\n‚Ä¢ ‚úì Use Case 2: Delete Inventory ‚Äì Fully Supported\n‚Ä¢ ‚úì Use Case 3: Reset Inventory ‚Äì Fully Supported\n‚Ä¢ ‚û°Ô∏è `src/helpers/resetInventory.js:8-28` ‚Äì The implementation allows resetting the entire inventory, clearing all entries, fulfilling the AC regarding rapid resets.\n‚Ä¢ ‚úì Use Case 4: Decrement After Sale ‚Äì Fully Supported\n‚Ä¢ üßæ Overall JIRA Validation Summary:\n‚Ä¢ ‚úì **JIRA Validation Passed** ‚Äì All Use Cases are fully supported by the code with accurate functionality implemented as per the acceptance criteria.\n‚Ä¢ ---\nTest Cases:\n‚Ä¢ ‚úÖ Test Case: Adding 10 units of an item to inventory ‚Äì Pass (Code processes and adds successfully if the quantity > 0).\n‚Ä¢ ‚úÖ Test Case: Deleting an existing item with non-zero inventory ‚Äì Pass (Item is deleted, logs success, and returns true).\n‚Ä¢ ‚úÖ Test Case: Reset the entire inventory map ‚Äì Pass (Inventory is cleared and logged appropriately).\n‚Ä¢ ‚úÖ Test Case: Decrement inventory by 5 for a sale transaction ‚Äì Pass (Provided sufficient current inventory; code decrements and logs accordingly).\n‚Ä¢ ‚ùå Test Case: Adding 0 units of an item to inventory ‚Äì Fail (Code responds with \"Invalid quantity\", refusing to add zero items).\n‚Ä¢ ‚ùå Test Case: Deleting a non-existent item or an item with zero inventory ‚Äì Fail (Returns false and logs a warning or error as specified).\n‚Ä¢ ‚ùå Test Case: Resetting when inventory map is undefined or already empty ‚Äì Fail (Returns false per current logic).\n‚Ä¢ ‚ùå Test Case: Decrement inventory more than available ‚Äì Fail (Returns an error \"Insufficient inventory for sale\").\n‚Ä¢ JIRA_ACCURACY: 100%\n\n\n---\n\n*This analysis was performed automatically by the AI Code Analysis Service*\n", "markup": "markdown", "html": "<h1 id=\"markdown-header-ai-analysis-report\">ü§ñ AI Analysis Report</h1>\n<hr>\n<h2 id=\"markdown-header-ai-involvement-classification\">üîç AI Involvement Classification</h2>\n<p><strong>Result:</strong> AI Authored\n<strong>AI Code Percentage:</strong> 67%</p>\n<p><strong>Analysis Reasons:</strong></p>\n<p>‚Ä¢ Repetitive patterns across unrelated files, such as identical logger configurations.\n‚Ä¢ Mechanical consistency in naming, formatting, and code structure across multiple helper files, suggesting templated code.\n‚Ä¢ Use of hardcoded credentials and logging inconsistencies, indicating human oversight and errors.</p>\n<hr>\n<h2 id=\"markdown-header-ai-code-review\">üîç AI Code Review</h2>\n<p><strong>Status:</strong> completed</p>\n<h2 id=\"markdown-header-total-issues-found\">üìä Total Issues Found</h2>\n<table>\n<thead>\n<tr>\n<th>Severity</th>\n<th>Count</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Critical</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Medium</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Low</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p><strong>JIRA Accuracy:</strong> 100%</p>\n<hr>\n<hr>\n<h2 id=\"markdown-header-jira-requirements-validation\">üéØ JIRA Requirements Validation</h2>\n<p>üéØ <strong>JIRA Requirements Validation</strong></p>\n<p>üìä <strong>Compliance Status:</strong> ‚ùå Non-Compliant\nüéØ <strong>Accuracy:</strong> 100.0%\n‚úÖ <strong>Test Cases Pass:</strong> ‚úÖ All Pass</p>\n<p>üîç <strong>Findings:</strong>\n‚Ä¢ JIRA Validation Results (Ticket ID: SCRUM-20):\n‚Ä¢ ‚úì Use Case 1: Add Inventory ‚Äì Fully Supported\n‚Ä¢ ‚û°Ô∏è <code>src/routes/inventory.js:50-62</code> ‚Äì The code in this section supports adding inventory items with a specified quantity to the system. The function <code>addItem</code> is called to update the inventory, which aligns with the AC of enabling addition to stock levels.\n‚Ä¢ ‚úì Use Case 2: Delete Inventory ‚Äì Fully Supported\n‚Ä¢ ‚úì Use Case 3: Reset Inventory ‚Äì Fully Supported\n‚Ä¢ ‚û°Ô∏è <code>src/helpers/resetInventory.js:8-28</code> ‚Äì The implementation allows resetting the entire inventory, clearing all entries, fulfilling the AC regarding rapid resets.\n‚Ä¢ ‚úì Use Case 4: Decrement After Sale ‚Äì Fully Supported\n‚Ä¢ üßæ Overall JIRA Validation Summary:\n‚Ä¢ ‚úì <strong>JIRA Validation Passed</strong> ‚Äì All Use Cases are fully supported by the code with accurate functionality implemented as per the acceptance criteria.\n‚Ä¢ ---\nTest Cases:\n‚Ä¢ ‚úÖ Test Case: Adding 10 units of an item to inventory ‚Äì Pass (Code processes and adds successfully if the quantity &gt; 0).\n‚Ä¢ ‚úÖ Test Case: Deleting an existing item with non-zero inventory ‚Äì Pass (Item is deleted, logs success, and returns true).\n‚Ä¢ ‚úÖ Test Case: Reset the entire inventory map ‚Äì Pass (Inventory is cleared and logged appropriately).\n‚Ä¢ ‚úÖ Test Case: Decrement inventory by 5 for a sale transaction ‚Äì Pass (Provided sufficient current inventory; code decrements and logs accordingly).\n‚Ä¢ ‚ùå Test Case: Adding 0 units of an item to inventory ‚Äì Fail (Code responds with \"Invalid quantity\", refusing to add zero items).\n‚Ä¢ ‚ùå Test Case: Deleting a non-existent item or an item with zero inventory ‚Äì Fail (Returns false and logs a warning or error as specified).\n‚Ä¢ ‚ùå Test Case: Resetting when inventory map is undefined or already empty ‚Äì Fail (Returns false per current logic).\n‚Ä¢ ‚ùå Test Case: Decrement inventory more than available ‚Äì Fail (Returns an error \"Insufficient inventory for sale\").\n‚Ä¢ JIRA_ACCURACY: 100%</p>\n<hr>\n<p><em>This analysis was performed automatically by the AI Code Analysis Service</em></p>"}, "user": {"display_name": "GURUNATHAN GUNASEELAN", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba9e2d8e4-ab1a-4535-b357-faf4c87f98c4%7D"}, "avatar": {"href": "https://secure.gravatar.com/avatar/1d4f937a128740365bdf01af4539abc0?d=https%3A%2F%2Favatar-management--avatars.us-west-2.prod.public.atl-paas.net%2Finitials%2FGG-0.png"}, "html": {"href": "https://bitbucket.org/%7Ba9e2d8e4-ab1a-4535-b357-faf4c87f98c4%7D/"}}, "type": "user", "uuid": "{a9e2d8e4-ab1a-4535-b357-faf4c87f98c4}", "account_id": "712020:d2cb2b31-64eb-4768-8c3c-ed3de799857e", "nickname": "GURUNATHAN GUNASEELAN"}, "deleted": false, "pending": false, "type": "pullrequest_comment", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/qdexconsulting/inventory-service/pullrequests/7/comments/655281390"}, "html": {"href": "https://bitbucket.org/qdexconsulting/inventory-service/pull-requests/7/_/diff#comment-655281390"}}, "pullrequest": {"type": "pullrequest", "id": 7, "title": "[SCRUM-20] feat: add inventory add, delete, and reset helpers", "draft": false, "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/qdexconsulting/inventory-service/pullrequests/7"}, "html": {"href": "https://bitbucket.org/qdexconsulting/inventory-service/pull-requests/7"}}}}
2025/07/10 07:16:50 [Bitbucket][PR_COMMENT] Added PR comment
2025/07/10 07:16:50 [Bitbucket] Fetching details for PR #7 from qdexconsulting/inventory-service
2025/07/10 07:16:50 Fetching PR details from: https://api.bitbucket.org/2.0/repositories/qdexconsulting/inventory-service/pullrequests/7
2025/07/10 07:16:50 PR Source Branch Details: map[links:map[] name:inventory-ops-feature sync_strategies:[merge_commit rebase]]
2025/07/10 07:16:50 [DEBUG] Found JIRA ID SCRUM-20 in text: [SCRUM-20] feat: add inventory add, delete, and reset helpers
2025/07/10 07:16:50 [DEBUG] Found JIRA ID: SCRUM-20 in PR #7
2025/07/10 07:16:50 [Bitbucket] Fetching commits for PR #7
2025/07/10 07:16:51 [Bitbucket] Found 4 commits
2025/07/10 07:16:51 [BitbucketService] Fetching diff from URL: https://api.bitbucket.org/2.0/repositories/qdexconsulting/inventory-service/pullrequests/7/diff
2025/07/10 07:16:52 [BitbucketService] Received diff content length: 4413
2025/07/10 07:16:52 [BitbucketService] First 200 chars of diff: diff --git a/push.log b/push.log
index 2f65a0f..e69de29 100644
--- a/push.log
+++ b/push.log
@@ -1 +0,0 @@
-Pushing to Bitbucket at Wed Jul  2 20:23:48 +08 2025
diff --git a/src/helpers/addInventory.j
2025/07/10 07:16:52 [DiffParser] File: push.log, Added: 0, Removed: 1, Total: 3
2025/07/10 07:16:52 [DiffParser] File: src/helpers/addInventory.js, Added: 5, Removed: 0, Total: 9
2025/07/10 07:16:52 [DiffParser] File: src/helpers/deleteInventory.js, Added: 26, Removed: 0, Total: 30
2025/07/10 07:16:52 [DiffParser] File: src/helpers/inventoryHelper.js, Added: 16, Removed: 0, Total: 24
2025/07/10 07:16:52 [DiffParser] File: src/helpers/resetInventory.js, Added: 26, Removed: 0, Total: 30
2025/07/10 07:16:52 [DiffParser] File: src/routes/inventory.js, Added: 20, Removed: 0, Total: 28
2025/07/10 07:16:52 [Debug] push.log identified as generated/config: contains .log
2025/07/10 07:16:52 [DEBUG] Found JIRA ID SCRUM-20 in text: [SCRUM-20] feat: add inventory add, delete, and reset helpers
2025/07/10 07:16:52 [DEBUG] Found JIRA ID: SCRUM-20 in PR #7
2025/07/10 07:16:52 [PR Upsert] Starting upsert for PR #7 from repo qdexconsulting/inventory-service
2025/07/10 07:16:52 [DEBUG] Looking up project by API key: 81f066fbd53b51b0df35fd6f7f77e19da8e8bdf7bc13610b3ac37744fd074fd2
2025/07/10 07:16:52 [DEBUG] MongoDB DB: aihcode, Collection: projects, Query: map[api_key:81f066fbd53b51b0df35fd6f7f77e19da8e8bdf7bc13610b3ac37744fd074fd2]
2025/07/10 07:16:52 [DEBUG] Found project: QDEX-Bitbucket-Test for API key: 81f066fbd53b51b0df35fd6f7f77e19da8e8bdf7bc13610b3ac37744fd074fd2
2025/07/10 07:16:52 [PR Upsert] Found project QDEX-Bitbucket-Test with repository type bitbucket
2025/07/10 07:16:52 [PR Upsert] Fetching full PR details from Bitbucket for repo: qdexconsulting/inventory-service, PR: 7
2025/07/10 07:16:52 [Bitbucket] Fetching details for PR #7 from qdexconsulting/inventory-service
2025/07/10 07:16:52 Fetching PR details from: https://api.bitbucket.org/2.0/repositories/qdexconsulting/inventory-service/pullrequests/7
2025/07/10 07:16:53 PR Source Branch Details: map[links:map[] name:inventory-ops-feature sync_strategies:[merge_commit rebase]]
2025/07/10 07:16:53 [DEBUG] Found JIRA ID SCRUM-20 in text: [SCRUM-20] feat: add inventory add, delete, and reset helpers
2025/07/10 07:16:53 [DEBUG] Found JIRA ID: SCRUM-20 in PR #7
2025/07/10 07:16:53 [Bitbucket] Fetching commits for PR #7
2025/07/10 07:16:53 [Bitbucket] Found 4 commits
2025/07/10 07:16:53 [BitbucketService] Fetching diff from URL: https://api.bitbucket.org/2.0/repositories/qdexconsulting/inventory-service/pullrequests/7/diff
2025/07/10 07:16:54 [BitbucketService] Received diff content length: 4413
2025/07/10 07:16:54 [BitbucketService] First 200 chars of diff: diff --git a/push.log b/push.log
index 2f65a0f..e69de29 100644
--- a/push.log
+++ b/push.log
@@ -1 +0,0 @@
-Pushing to Bitbucket at Wed Jul  2 20:23:48 +08 2025
diff --git a/src/helpers/addInventory.j
2025/07/10 07:16:54 [DiffParser] File: push.log, Added: 0, Removed: 1, Total: 3
2025/07/10 07:16:54 [DiffParser] File: src/helpers/addInventory.js, Added: 5, Removed: 0, Total: 9
2025/07/10 07:16:54 [DiffParser] File: src/helpers/deleteInventory.js, Added: 26, Removed: 0, Total: 30
2025/07/10 07:16:54 [DiffParser] File: src/helpers/inventoryHelper.js, Added: 16, Removed: 0, Total: 24
2025/07/10 07:16:54 [DiffParser] File: src/helpers/resetInventory.js, Added: 26, Removed: 0, Total: 30
2025/07/10 07:16:54 [DiffParser] File: src/routes/inventory.js, Added: 20, Removed: 0, Total: 28
2025/07/10 07:16:54 [Debug] push.log identified as generated/config: contains .log
2025/07/10 07:16:54 [DEBUG] Found JIRA ID SCRUM-20 in text: [SCRUM-20] feat: add inventory add, delete, and reset helpers
2025/07/10 07:16:54 [DEBUG] Found JIRA ID: SCRUM-20 in PR #7
2025/07/10 07:16:54 [PR Upsert] Fetched full PR details: &{PullRequest:{ID:7 Title:[SCRUM-20] feat: add inventory add, delete, and reset helpers Description:* **Add Inventory:**

`POST /api/inventory/:itemId/add`

Request body: `{ "quantity": <number> }`

* **Delete Inventory:**

`DELETE /api/inventory/:itemId`

* **Reset Inventory:**

`POST /api/inventory/reset`

* **Decrement After Sale:**

`POST /api/inventory/:itemId/decrement-after-sale`

Request body: `{ "quantity": <number> }`
JIRA: SCRUM-20
JIRA: SCRUM-20 JiraID:SCRUM-20 Source:{Branch:{Name:inventory-ops-feature} Commit:{Hash:a5f2fe76d77f Message: Author:{Raw: DisplayName: Email:} Date:} Commits:[{Hash:a5f2fe76d77fb3791e4ed33bf42173f88719713e Message:remove
 Author:{Raw:Gurunathan Gunaseelan <gurunathangunaseelan@gmail.com> DisplayName: Email:} Date:2025-07-06T09:02:50+00:00} {Hash:47c3c5910c4a1fd648cf58e5f35e5870b5eb9ec7 Message:feat: update inventory helpers with quick DB insert, temp credentials, and debug logs
 Author:{Raw:Gurunathan Gunaseelan <gurunathangunaseelan@gmail.com> DisplayName: Email:} Date:2025-07-05T23:34:33+00:00} {Hash:24d92688c2a2eef77d1145ad7c1a12d69c77580e Message:feat: update inventory helpers with quick DB insert, temp credentials, and debug logs
 Author:{Raw:Gurunathan Gunaseelan <gurunathangunaseelan@gmail.com> DisplayName: Email:} Date:2025-07-05T15:17:18+00:00} {Hash:5234559beb47e432b391b0e96bf818905f574395 Message:feat: add inventory add, delete, and reset helpers
 Author:{Raw:Gurunathan Gunaseelan <gurunathangunaseelan@gmail.com> DisplayName: Email:} Date:2025-07-05T14:25:13+00:00}]} Diff:{Diffs:[{NewPath:src/helpers/addInventory.js Lines:[{Content: a/src/helpers/addInventory.js b/src/helpers/addInventory.js Type:context} {Content:new file mode 100644 Type:context} {Content:+const inventory = require('./inventoryHelper'); Type:added} {Content:+function addInventory(itemId, quantity) { Type:added} {Content:+  return inventory.addItem(itemId, quantity); Type:added} {Content:+} Type:added} {Content:+module.exports = { addInventory };  Type:added} {Content:\ No newline at end of file Type:context} {Content: Type:context}]} {NewPath:src/helpers/deleteInventory.js Lines:[{Content: a/src/helpers/deleteInventory.js b/src/helpers/deleteInventory.js Type:context} {Content:new file mode 100644 Type:context} {Content:+const winston = require('winston'); Type:added} {Content:+const logger = winston.createLogger({ Type:added} {Content:+  level: 'info', Type:added} {Content:+  format: winston.format.combine( Type:added} {Content:+    winston.format.timestamp(), Type:added} {Content:+    winston.format.json() Type:added} {Content:+  ), Type:added} {Content:+  transports: [ Type:added} {Content:+    new winston.transports.File({ filename: 'delete-inventory.log' }) Type:added} {Content:+  ] Type:added} {Content:+}); Type:added} {Content:+const inventory = require('./inventoryHelper'); Type:added} {Content:+function deleteInventory(itemId) { Type:added} {Content:+  try { Type:added} {Content:+    if (!inventory) return false; Type:added} {Content:+    if (!itemId) return false; Type:added} {Content:+    if (inventory.getItemQuantity(itemId) === 0) return false; Type:added} {Content:+    inventory._inventory.delete(itemId); Type:added} {Content:+    logger.info(`Deleted inventory for itemId: ${itemId}`); Type:added} {Content:+    return true; Type:added} {Content:+  } catch (e) { Type:added} {Content:+    logger.error('Error deleting inventory: ' + e.message); Type:added} {Content:+    return false; Type:added} {Content:+  } Type:added} {Content:+} Type:added} {Content:+module.exports = { deleteInventory };  Type:added} {Content:\ No newline at end of file Type:context} {Content: Type:context}]} {NewPath:src/helpers/inventoryHelper.js Lines:[{Content: a/src/helpers/inventoryHelper.js b/src/helpers/inventoryHelper.js Type:context} {Content:       quantity Type:context} {Content:     })); Type:context} {Content:   } Type:context} {Content:+ Type:added} {Content:+  static decrementAfterSale(itemId, quantity) { Type:added} {Content:+    try { Type:added} {Content:+      const currentQuantity = inventory.get(itemId) || 0; Type:added} {Content:+      if (currentQuantity < quantity) { Type:added} {Content:+        logger.warn(`Not enough inventory for itemId: ${itemId} to decrement after sale`); Type:added} {Content:+        return false; Type:added} {Content:+      } Type:added} {Content:+      inventory.set(itemId, currentQuantity - quantity); Type:added} {Content:+      logger.info(`Decremented ${quantity} items for itemId: ${itemId} after sale`); Type:added} {Content:+      return true; Type:added} {Content:+    } catch (error) { Type:added} {Content:+      logger.error('Error decrementing after sale: ' + error.message); Type:added} {Content:+      return false; Type:added} {Content:+    } Type:added} {Content:+  } Type:added} {Content: } Type:context} {Content:  Type:context} {Content: // CRITICAL: Exposed credentials Type:context} {Content: Type:context}]} {NewPath:src/helpers/resetInventory.js Lines:[{Content: a/src/helpers/resetInventory.js b/src/helpers/resetInventory.js Type:context} {Content:new file mode 100644 Type:context} {Content:+const winston = require('winston'); Type:added} {Content:+const logger = winston.createLogger({ Type:added} {Content:+  level: 'info', Type:added} {Content:+  format: winston.format.combine( Type:added} {Content:+    winston.format.timestamp(), Type:added} {Content:+    winston.format.json() Type:added} {Content:+  ), Type:added} {Content:+  transports: [ Type:added} {Content:+    new winston.transports.File({ filename: 'reset-inventory.log' }) Type:added} {Content:+  ] Type:added} {Content:+}); Type:added} {Content:+const inventory = require('./inventoryHelper'); Type:added} {Content:+function resetInventory() { Type:added} {Content:+  try { Type:added} {Content:+    if (inventory && inventory._inventory) { Type:added} {Content:+      inventory._inventory.clear(); Type:added} {Content:+      logger.info('Inventory reset'); Type:added} {Content:+      return true; Type:added} {Content:+    } Type:added} {Content:+    return false; Type:added} {Content:+  } catch (e) { Type:added} {Content:+    logger.error('Error resetting inventory: ' + e.message); Type:added} {Content:+    return false; Type:added} {Content:+  } Type:added} {Content:+} Type:added} {Content:+module.exports = { resetInventory };  Type:added} {Content:\ No newline at end of file Type:context} {Content: Type:context}]} {NewPath:src/routes/inventory.js Lines:[{Content: a/src/routes/inventory.js b/src/routes/inventory.js Type:context} {Content:   } Type:context} {Content: }); Type:context} {Content:  Type:context} {Content:+// Decrement inventory after sales Type:added} {Content:+router.post('/:itemId/decrement-after-sale', (req, res) => { Type:added} {Content:+  try { Type:added} {Content:+    const { itemId } = req.params; Type:added} {Content:+    const { quantity } = req.body; Type:added} {Content:+    if (!quantity || quantity <= 0) { Type:added} {Content:+      return res.status(400).json({ error: 'Invalid quantity' }); Type:added} {Content:+    } Type:added} {Content:+    const success = InventoryHelper.decrementAfterSale(itemId, quantity); Type:added} {Content:+    if (success) { Type:added} {Content:+      res.json({ message: 'Inventory decremented after sale successfully' }); Type:added} {Content:+    } else { Type:added} {Content:+      res.status(400).json({ error: 'Insufficient inventory for sale' }); Type:added} {Content:+    } Type:added} {Content:+  } catch (error) { Type:added} {Content:+    logger.error(`Error decrementing after sale: ${error.message}`); Type:added} {Content:+    res.status(500).json({ error: 'Failed to decrement inventory after sale' }); Type:added} {Content:+  } Type:added} {Content:+}); Type:added} {Content:+ Type:added} {Content: // CRITICAL: SQL Injection Type:context} {Content: router.get('/search/:query', (req, res) => { Type:context} {Content:   const query = req.params.query; Type:context} {Content: Type:context}]}]} Author:{Raw: DisplayName:GURUNATHAN GUNASEELAN Email:} CreatedAt:0001-01-01 00:00:00 +0000 UTC} Repository:{FullName:qdexconsulting/inventory-service Links:{HTML:{Href:}}} EnhancedDiffContext:<nil>}
2025/07/10 07:16:54 [Bitbucket PR Upsert] Starting upsert for PR #7 from repo qdexconsulting/inventory-service
2025/07/10 07:16:54 [Bitbucket PR Upsert] Upserting with filter: map[pr_number:7 project_key:81f066fbd53b51b0df35fd6f7f77e19da8e8bdf7bc13610b3ac37744fd074fd2]
2025/07/10 07:16:54 [Bitbucket PR Upsert] Successfully upserted PR #7 from repo qdexconsulting/inventory-service (Matched: 1, Modified: 0, Upserted: false)
2025/07/10 07:16:54 [PR Upsert] Successfully upserted PR 7 for repo qdexconsulting/inventory-service
2025/07/10 07:16:54 [JIRA Upsert] Starting JIRA upsert for ID: SCRUM-20
2025/07/10 07:16:54 [JIRA Upsert] Attempt 1/3 to fetch JIRA ticket SCRUM-20
2025/07/10 07:16:54 [JIRA Upsert] Successfully fetched JIRA ticket: &{ID:SCRUM-20 Title:Business Description: Enhanced Inventory Management Capabilities Description:The inventory service has been enhanced to provide comprehensive inventory management functionalities, supporting key business operations and future scalability. The new features enable seamless control over stock levels, ensuring that inventory data remains accurate and actionable across all business processes.

*Key Capabilities:*

* *Add Inventory:* Easily increase stock levels for any item, supporting restocking and procurement workflows.

* *Delete Inventory:* Remove obsolete or discontinued items from the system, keeping inventory records clean and relevant.

* *Reset Inventory:* Instantly clear all inventory data, enabling rapid resets for audits, testing, or business pivots.

* *Decrement After Sale:* Automatically reduce item quantities following sales transactions, ensuring real-time inventory accuracy and supporting sales reconciliation.

These enhancements empower the business to maintain up-to-date inventory records, reduce operational risk, and support integration with sales, procurement, and reporting systems. The modular design ensures that the system can be easily extended to support future business needs, such as integration with external databases, analytics, or automated replenishment. Status:To Do Type:Story Created:2025-07-05 19:57:13.879 +0530 +0530 Updated:2025-07-05 19:57:14.7 +0530 +0530 ParentID: ParentDesc: Assignee:}
2025/07/10 07:16:55 [CycleTime][DEBUG] Full changelog for SCRUM-20: []
2025/07/10 07:16:55 [CycleTime][DEBUG] No valid transitions found for cycle time calculation
2025/07/10 07:16:55 [CycleTime][DEBUG] Successfully upserted JIRA cycle time for SCRUM-20
2025/07/10 07:16:55 [qdexconsulting/inventory-service-7-1752102781531510000] Successfully processed Bitbucket PR #7 in 3m53.883779958s
üü¢ [21377e66-754d-4bbf-a4cf-18985ad8eb52] POST /api/webhook/bitbucket 200 3m54.38519075s ::1 Bitbucket-Webhooks/2.0
[GIN] 2025/07/10 - 07:16:55 | 200 |         3m54s |             ::1 | POST     "/api/webhook/bitbucket"
